// Code generated by entc, DO NOT EDIT.

package ent

import (
	"compound/internal/data/ent/preference"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PreferenceCreate is the builder for creating a Preference entity.
type PreferenceCreate struct {
	config
	mutation *PreferenceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (pc *PreferenceCreate) SetCreateTime(t time.Time) *PreferenceCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PreferenceCreate) SetNillableCreateTime(t *time.Time) *PreferenceCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PreferenceCreate) SetUpdateTime(t time.Time) *PreferenceCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PreferenceCreate) SetNillableUpdateTime(t *time.Time) *PreferenceCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetKey sets the "key" field.
func (pc *PreferenceCreate) SetKey(s string) *PreferenceCreate {
	pc.mutation.SetKey(s)
	return pc
}

// SetValue sets the "value" field.
func (pc *PreferenceCreate) SetValue(s string) *PreferenceCreate {
	pc.mutation.SetValue(s)
	return pc
}

// Mutation returns the PreferenceMutation object of the builder.
func (pc *PreferenceCreate) Mutation() *PreferenceMutation {
	return pc.mutation
}

// Save creates the Preference in the database.
func (pc *PreferenceCreate) Save(ctx context.Context) (*Preference, error) {
	var (
		err  error
		node *Preference
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PreferenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PreferenceCreate) SaveX(ctx context.Context) *Preference {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PreferenceCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PreferenceCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PreferenceCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := preference.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := preference.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PreferenceCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Preference.create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Preference.update_time"`)}
	}
	if _, ok := pc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Preference.key"`)}
	}
	if _, ok := pc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Preference.value"`)}
	}
	return nil
}

func (pc *PreferenceCreate) sqlSave(ctx context.Context) (*Preference, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PreferenceCreate) createSpec() (*Preference, *sqlgraph.CreateSpec) {
	var (
		_node = &Preference{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: preference.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: preference.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: preference.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: preference.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: preference.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := pc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: preference.FieldValue,
		})
		_node.Value = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Preference.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PreferenceUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PreferenceCreate) OnConflict(opts ...sql.ConflictOption) *PreferenceUpsertOne {
	pc.conflict = opts
	return &PreferenceUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Preference.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PreferenceCreate) OnConflictColumns(columns ...string) *PreferenceUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PreferenceUpsertOne{
		create: pc,
	}
}

type (
	// PreferenceUpsertOne is the builder for "upsert"-ing
	//  one Preference node.
	PreferenceUpsertOne struct {
		create *PreferenceCreate
	}

	// PreferenceUpsert is the "OnConflict" setter.
	PreferenceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *PreferenceUpsert) SetCreateTime(v time.Time) *PreferenceUpsert {
	u.Set(preference.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *PreferenceUpsert) UpdateCreateTime() *PreferenceUpsert {
	u.SetExcluded(preference.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *PreferenceUpsert) SetUpdateTime(v time.Time) *PreferenceUpsert {
	u.Set(preference.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PreferenceUpsert) UpdateUpdateTime() *PreferenceUpsert {
	u.SetExcluded(preference.FieldUpdateTime)
	return u
}

// SetKey sets the "key" field.
func (u *PreferenceUpsert) SetKey(v string) *PreferenceUpsert {
	u.Set(preference.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PreferenceUpsert) UpdateKey() *PreferenceUpsert {
	u.SetExcluded(preference.FieldKey)
	return u
}

// SetValue sets the "value" field.
func (u *PreferenceUpsert) SetValue(v string) *PreferenceUpsert {
	u.Set(preference.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PreferenceUpsert) UpdateValue() *PreferenceUpsert {
	u.SetExcluded(preference.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Preference.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PreferenceUpsertOne) UpdateNewValues() *PreferenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(preference.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(preference.FieldKey)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Preference.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PreferenceUpsertOne) Ignore() *PreferenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PreferenceUpsertOne) DoNothing() *PreferenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PreferenceCreate.OnConflict
// documentation for more info.
func (u *PreferenceUpsertOne) Update(set func(*PreferenceUpsert)) *PreferenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PreferenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *PreferenceUpsertOne) SetCreateTime(v time.Time) *PreferenceUpsertOne {
	return u.Update(func(s *PreferenceUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *PreferenceUpsertOne) UpdateCreateTime() *PreferenceUpsertOne {
	return u.Update(func(s *PreferenceUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *PreferenceUpsertOne) SetUpdateTime(v time.Time) *PreferenceUpsertOne {
	return u.Update(func(s *PreferenceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PreferenceUpsertOne) UpdateUpdateTime() *PreferenceUpsertOne {
	return u.Update(func(s *PreferenceUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetKey sets the "key" field.
func (u *PreferenceUpsertOne) SetKey(v string) *PreferenceUpsertOne {
	return u.Update(func(s *PreferenceUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PreferenceUpsertOne) UpdateKey() *PreferenceUpsertOne {
	return u.Update(func(s *PreferenceUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *PreferenceUpsertOne) SetValue(v string) *PreferenceUpsertOne {
	return u.Update(func(s *PreferenceUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PreferenceUpsertOne) UpdateValue() *PreferenceUpsertOne {
	return u.Update(func(s *PreferenceUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *PreferenceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PreferenceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PreferenceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PreferenceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PreferenceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PreferenceCreateBulk is the builder for creating many Preference entities in bulk.
type PreferenceCreateBulk struct {
	config
	builders []*PreferenceCreate
	conflict []sql.ConflictOption
}

// Save creates the Preference entities in the database.
func (pcb *PreferenceCreateBulk) Save(ctx context.Context) ([]*Preference, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Preference, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PreferenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PreferenceCreateBulk) SaveX(ctx context.Context) []*Preference {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PreferenceCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PreferenceCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Preference.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PreferenceUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PreferenceCreateBulk) OnConflict(opts ...sql.ConflictOption) *PreferenceUpsertBulk {
	pcb.conflict = opts
	return &PreferenceUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Preference.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PreferenceCreateBulk) OnConflictColumns(columns ...string) *PreferenceUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PreferenceUpsertBulk{
		create: pcb,
	}
}

// PreferenceUpsertBulk is the builder for "upsert"-ing
// a bulk of Preference nodes.
type PreferenceUpsertBulk struct {
	create *PreferenceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Preference.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PreferenceUpsertBulk) UpdateNewValues() *PreferenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(preference.FieldCreateTime)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(preference.FieldKey)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Preference.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PreferenceUpsertBulk) Ignore() *PreferenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PreferenceUpsertBulk) DoNothing() *PreferenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PreferenceCreateBulk.OnConflict
// documentation for more info.
func (u *PreferenceUpsertBulk) Update(set func(*PreferenceUpsert)) *PreferenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PreferenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *PreferenceUpsertBulk) SetCreateTime(v time.Time) *PreferenceUpsertBulk {
	return u.Update(func(s *PreferenceUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *PreferenceUpsertBulk) UpdateCreateTime() *PreferenceUpsertBulk {
	return u.Update(func(s *PreferenceUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *PreferenceUpsertBulk) SetUpdateTime(v time.Time) *PreferenceUpsertBulk {
	return u.Update(func(s *PreferenceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PreferenceUpsertBulk) UpdateUpdateTime() *PreferenceUpsertBulk {
	return u.Update(func(s *PreferenceUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetKey sets the "key" field.
func (u *PreferenceUpsertBulk) SetKey(v string) *PreferenceUpsertBulk {
	return u.Update(func(s *PreferenceUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PreferenceUpsertBulk) UpdateKey() *PreferenceUpsertBulk {
	return u.Update(func(s *PreferenceUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *PreferenceUpsertBulk) SetValue(v string) *PreferenceUpsertBulk {
	return u.Update(func(s *PreferenceUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PreferenceUpsertBulk) UpdateValue() *PreferenceUpsertBulk {
	return u.Update(func(s *PreferenceUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *PreferenceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PreferenceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PreferenceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PreferenceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
