// Code generated by entc, DO NOT EDIT.

package accountctoken

import (
	"compound/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUser), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// EnteredMarket applies equality check predicate on the "entered_market" field. It's identical to EnteredMarketEQ.
func EnteredMarket(v bool) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnteredMarket), v))
	})
}

// CtokenBalance applies equality check predicate on the "ctoken_balance" field. It's identical to CtokenBalanceEQ.
func CtokenBalance(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtokenBalance), v))
	})
}

// StoredBorrowBalance applies equality check predicate on the "stored_borrow_balance" field. It's identical to StoredBorrowBalanceEQ.
func StoredBorrowBalance(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoredBorrowBalance), v))
	})
}

// BorrowIndex applies equality check predicate on the "borrow_index" field. It's identical to BorrowIndexEQ.
func BorrowIndex(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBorrowIndex), v))
	})
}

// TotalUnderlyingSupplied applies equality check predicate on the "total_underlying_supplied" field. It's identical to TotalUnderlyingSuppliedEQ.
func TotalUnderlyingSupplied(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingRedeemed applies equality check predicate on the "total_underlying_redeemed" field. It's identical to TotalUnderlyingRedeemedEQ.
func TotalUnderlyingRedeemed(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingBorrowed applies equality check predicate on the "total_underlying_borrowed" field. It's identical to TotalUnderlyingBorrowedEQ.
func TotalUnderlyingBorrowed(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingRepaid applies equality check predicate on the "total_underlying_repaid" field. It's identical to TotalUnderlyingRepaidEQ.
func TotalUnderlyingRepaid(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// SupplyBalanceUnderlying applies equality check predicate on the "supply_balance_underlying" field. It's identical to SupplyBalanceUnderlyingEQ.
func SupplyBalanceUnderlying(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlying applies equality check predicate on the "borrow_balance_underlying" field. It's identical to BorrowBalanceUnderlyingEQ.
func BorrowBalanceUnderlying(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// LifetimeSupplyInterestAccrued applies equality check predicate on the "lifetime_supply_interest_accrued" field. It's identical to LifetimeSupplyInterestAccruedEQ.
func LifetimeSupplyInterestAccrued(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccrued applies equality check predicate on the "lifetime_borrow_interest_accrued" field. It's identical to LifetimeBorrowInterestAccruedEQ.
func LifetimeBorrowInterestAccrued(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// SafeWithdrawAmountUnderlying applies equality check predicate on the "safe_withdraw_amount_underlying" field. It's identical to SafeWithdrawAmountUnderlyingEQ.
func SafeWithdrawAmountUnderlying(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// CollateralValueInUsd applies equality check predicate on the "collateral_value_in_usd" field. It's identical to CollateralValueInUsdEQ.
func CollateralValueInUsd(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollateralValueInUsd), v))
	})
}

// BorrowValueInUsd applies equality check predicate on the "borrow_value_in_usd" field. It's identical to BorrowValueInUsdEQ.
func BorrowValueInUsd(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBorrowValueInUsd), v))
	})
}

// UnderlyingPriceUsd applies equality check predicate on the "underlying_price_usd" field. It's identical to UnderlyingPriceUsdEQ.
func UnderlyingPriceUsd(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// BlockNumber applies equality check predicate on the "block_number" field. It's identical to BlockNumberEQ.
func BlockNumber(v uint64) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockNumber), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUser), v))
	})
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUser), v))
	})
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUser), v...))
	})
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUser), v...))
	})
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUser), v))
	})
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUser), v))
	})
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUser), v))
	})
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUser), v))
	})
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUser), v))
	})
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUser), v))
	})
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUser), v))
	})
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUser), v))
	})
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUser), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymbol), v))
	})
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSymbol), v...))
	})
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSymbol), v...))
	})
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymbol), v))
	})
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymbol), v))
	})
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymbol), v))
	})
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymbol), v))
	})
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymbol), v))
	})
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymbol), v))
	})
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymbol), v))
	})
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymbol), v))
	})
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymbol), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EnteredMarketEQ applies the EQ predicate on the "entered_market" field.
func EnteredMarketEQ(v bool) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnteredMarket), v))
	})
}

// EnteredMarketNEQ applies the NEQ predicate on the "entered_market" field.
func EnteredMarketNEQ(v bool) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnteredMarket), v))
	})
}

// CtokenBalanceEQ applies the EQ predicate on the "ctoken_balance" field.
func CtokenBalanceEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceNEQ applies the NEQ predicate on the "ctoken_balance" field.
func CtokenBalanceNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceIn applies the In predicate on the "ctoken_balance" field.
func CtokenBalanceIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCtokenBalance), v...))
	})
}

// CtokenBalanceNotIn applies the NotIn predicate on the "ctoken_balance" field.
func CtokenBalanceNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCtokenBalance), v...))
	})
}

// CtokenBalanceGT applies the GT predicate on the "ctoken_balance" field.
func CtokenBalanceGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceGTE applies the GTE predicate on the "ctoken_balance" field.
func CtokenBalanceGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceLT applies the LT predicate on the "ctoken_balance" field.
func CtokenBalanceLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceLTE applies the LTE predicate on the "ctoken_balance" field.
func CtokenBalanceLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceContains applies the Contains predicate on the "ctoken_balance" field.
func CtokenBalanceContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceHasPrefix applies the HasPrefix predicate on the "ctoken_balance" field.
func CtokenBalanceHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceHasSuffix applies the HasSuffix predicate on the "ctoken_balance" field.
func CtokenBalanceHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceEqualFold applies the EqualFold predicate on the "ctoken_balance" field.
func CtokenBalanceEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCtokenBalance), v))
	})
}

// CtokenBalanceContainsFold applies the ContainsFold predicate on the "ctoken_balance" field.
func CtokenBalanceContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCtokenBalance), v))
	})
}

// StoredBorrowBalanceEQ applies the EQ predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceNEQ applies the NEQ predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceIn applies the In predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStoredBorrowBalance), v...))
	})
}

// StoredBorrowBalanceNotIn applies the NotIn predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStoredBorrowBalance), v...))
	})
}

// StoredBorrowBalanceGT applies the GT predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceGTE applies the GTE predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceLT applies the LT predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceLTE applies the LTE predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceContains applies the Contains predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceHasPrefix applies the HasPrefix predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceHasSuffix applies the HasSuffix predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceEqualFold applies the EqualFold predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStoredBorrowBalance), v))
	})
}

// StoredBorrowBalanceContainsFold applies the ContainsFold predicate on the "stored_borrow_balance" field.
func StoredBorrowBalanceContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStoredBorrowBalance), v))
	})
}

// BorrowIndexEQ applies the EQ predicate on the "borrow_index" field.
func BorrowIndexEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexNEQ applies the NEQ predicate on the "borrow_index" field.
func BorrowIndexNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexIn applies the In predicate on the "borrow_index" field.
func BorrowIndexIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBorrowIndex), v...))
	})
}

// BorrowIndexNotIn applies the NotIn predicate on the "borrow_index" field.
func BorrowIndexNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBorrowIndex), v...))
	})
}

// BorrowIndexGT applies the GT predicate on the "borrow_index" field.
func BorrowIndexGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexGTE applies the GTE predicate on the "borrow_index" field.
func BorrowIndexGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexLT applies the LT predicate on the "borrow_index" field.
func BorrowIndexLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexLTE applies the LTE predicate on the "borrow_index" field.
func BorrowIndexLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexContains applies the Contains predicate on the "borrow_index" field.
func BorrowIndexContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexHasPrefix applies the HasPrefix predicate on the "borrow_index" field.
func BorrowIndexHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexHasSuffix applies the HasSuffix predicate on the "borrow_index" field.
func BorrowIndexHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexEqualFold applies the EqualFold predicate on the "borrow_index" field.
func BorrowIndexEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBorrowIndex), v))
	})
}

// BorrowIndexContainsFold applies the ContainsFold predicate on the "borrow_index" field.
func BorrowIndexContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBorrowIndex), v))
	})
}

// TotalUnderlyingSuppliedEQ applies the EQ predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedNEQ applies the NEQ predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedIn applies the In predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalUnderlyingSupplied), v...))
	})
}

// TotalUnderlyingSuppliedNotIn applies the NotIn predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalUnderlyingSupplied), v...))
	})
}

// TotalUnderlyingSuppliedGT applies the GT predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedGTE applies the GTE predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedLT applies the LT predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedLTE applies the LTE predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedContains applies the Contains predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedHasPrefix applies the HasPrefix predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedHasSuffix applies the HasSuffix predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedEqualFold applies the EqualFold predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingSuppliedContainsFold applies the ContainsFold predicate on the "total_underlying_supplied" field.
func TotalUnderlyingSuppliedContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTotalUnderlyingSupplied), v))
	})
}

// TotalUnderlyingRedeemedEQ applies the EQ predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedNEQ applies the NEQ predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedIn applies the In predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalUnderlyingRedeemed), v...))
	})
}

// TotalUnderlyingRedeemedNotIn applies the NotIn predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalUnderlyingRedeemed), v...))
	})
}

// TotalUnderlyingRedeemedGT applies the GT predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedGTE applies the GTE predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedLT applies the LT predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedLTE applies the LTE predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedContains applies the Contains predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedHasPrefix applies the HasPrefix predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedHasSuffix applies the HasSuffix predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedEqualFold applies the EqualFold predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingRedeemedContainsFold applies the ContainsFold predicate on the "total_underlying_redeemed" field.
func TotalUnderlyingRedeemedContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTotalUnderlyingRedeemed), v))
	})
}

// TotalUnderlyingBorrowedEQ applies the EQ predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedNEQ applies the NEQ predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedIn applies the In predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalUnderlyingBorrowed), v...))
	})
}

// TotalUnderlyingBorrowedNotIn applies the NotIn predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalUnderlyingBorrowed), v...))
	})
}

// TotalUnderlyingBorrowedGT applies the GT predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedGTE applies the GTE predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedLT applies the LT predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedLTE applies the LTE predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedContains applies the Contains predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedHasPrefix applies the HasPrefix predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedHasSuffix applies the HasSuffix predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedEqualFold applies the EqualFold predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingBorrowedContainsFold applies the ContainsFold predicate on the "total_underlying_borrowed" field.
func TotalUnderlyingBorrowedContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTotalUnderlyingBorrowed), v))
	})
}

// TotalUnderlyingRepaidEQ applies the EQ predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidNEQ applies the NEQ predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidIn applies the In predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalUnderlyingRepaid), v...))
	})
}

// TotalUnderlyingRepaidNotIn applies the NotIn predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalUnderlyingRepaid), v...))
	})
}

// TotalUnderlyingRepaidGT applies the GT predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidGTE applies the GTE predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidLT applies the LT predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidLTE applies the LTE predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidContains applies the Contains predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidHasPrefix applies the HasPrefix predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidHasSuffix applies the HasSuffix predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidEqualFold applies the EqualFold predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// TotalUnderlyingRepaidContainsFold applies the ContainsFold predicate on the "total_underlying_repaid" field.
func TotalUnderlyingRepaidContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTotalUnderlyingRepaid), v))
	})
}

// SupplyBalanceUnderlyingEQ applies the EQ predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingNEQ applies the NEQ predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingIn applies the In predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSupplyBalanceUnderlying), v...))
	})
}

// SupplyBalanceUnderlyingNotIn applies the NotIn predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSupplyBalanceUnderlying), v...))
	})
}

// SupplyBalanceUnderlyingGT applies the GT predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingGTE applies the GTE predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingLT applies the LT predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingLTE applies the LTE predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingContains applies the Contains predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingHasPrefix applies the HasPrefix predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingHasSuffix applies the HasSuffix predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingEqualFold applies the EqualFold predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// SupplyBalanceUnderlyingContainsFold applies the ContainsFold predicate on the "supply_balance_underlying" field.
func SupplyBalanceUnderlyingContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSupplyBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingEQ applies the EQ predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingNEQ applies the NEQ predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingIn applies the In predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBorrowBalanceUnderlying), v...))
	})
}

// BorrowBalanceUnderlyingNotIn applies the NotIn predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBorrowBalanceUnderlying), v...))
	})
}

// BorrowBalanceUnderlyingGT applies the GT predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingGTE applies the GTE predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingLT applies the LT predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingLTE applies the LTE predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingContains applies the Contains predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingHasPrefix applies the HasPrefix predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingHasSuffix applies the HasSuffix predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingEqualFold applies the EqualFold predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// BorrowBalanceUnderlyingContainsFold applies the ContainsFold predicate on the "borrow_balance_underlying" field.
func BorrowBalanceUnderlyingContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBorrowBalanceUnderlying), v))
	})
}

// LifetimeSupplyInterestAccruedEQ applies the EQ predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedNEQ applies the NEQ predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedIn applies the In predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLifetimeSupplyInterestAccrued), v...))
	})
}

// LifetimeSupplyInterestAccruedNotIn applies the NotIn predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLifetimeSupplyInterestAccrued), v...))
	})
}

// LifetimeSupplyInterestAccruedGT applies the GT predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedGTE applies the GTE predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedLT applies the LT predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedLTE applies the LTE predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedContains applies the Contains predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedHasPrefix applies the HasPrefix predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedHasSuffix applies the HasSuffix predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedEqualFold applies the EqualFold predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeSupplyInterestAccruedContainsFold applies the ContainsFold predicate on the "lifetime_supply_interest_accrued" field.
func LifetimeSupplyInterestAccruedContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLifetimeSupplyInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedEQ applies the EQ predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedNEQ applies the NEQ predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedIn applies the In predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLifetimeBorrowInterestAccrued), v...))
	})
}

// LifetimeBorrowInterestAccruedNotIn applies the NotIn predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLifetimeBorrowInterestAccrued), v...))
	})
}

// LifetimeBorrowInterestAccruedGT applies the GT predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedGTE applies the GTE predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedLT applies the LT predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedLTE applies the LTE predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedContains applies the Contains predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedHasPrefix applies the HasPrefix predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedHasSuffix applies the HasSuffix predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedEqualFold applies the EqualFold predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// LifetimeBorrowInterestAccruedContainsFold applies the ContainsFold predicate on the "lifetime_borrow_interest_accrued" field.
func LifetimeBorrowInterestAccruedContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLifetimeBorrowInterestAccrued), v))
	})
}

// SafeWithdrawAmountUnderlyingEQ applies the EQ predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingNEQ applies the NEQ predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingIn applies the In predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSafeWithdrawAmountUnderlying), v...))
	})
}

// SafeWithdrawAmountUnderlyingNotIn applies the NotIn predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSafeWithdrawAmountUnderlying), v...))
	})
}

// SafeWithdrawAmountUnderlyingGT applies the GT predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingGTE applies the GTE predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingLT applies the LT predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingLTE applies the LTE predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingContains applies the Contains predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingHasPrefix applies the HasPrefix predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingHasSuffix applies the HasSuffix predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingEqualFold applies the EqualFold predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// SafeWithdrawAmountUnderlyingContainsFold applies the ContainsFold predicate on the "safe_withdraw_amount_underlying" field.
func SafeWithdrawAmountUnderlyingContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSafeWithdrawAmountUnderlying), v))
	})
}

// CollateralValueInUsdEQ applies the EQ predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdNEQ applies the NEQ predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdIn applies the In predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollateralValueInUsd), v...))
	})
}

// CollateralValueInUsdNotIn applies the NotIn predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollateralValueInUsd), v...))
	})
}

// CollateralValueInUsdGT applies the GT predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdGTE applies the GTE predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdLT applies the LT predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdLTE applies the LTE predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdContains applies the Contains predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdHasPrefix applies the HasPrefix predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdHasSuffix applies the HasSuffix predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdEqualFold applies the EqualFold predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollateralValueInUsd), v))
	})
}

// CollateralValueInUsdContainsFold applies the ContainsFold predicate on the "collateral_value_in_usd" field.
func CollateralValueInUsdContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollateralValueInUsd), v))
	})
}

// BorrowValueInUsdEQ applies the EQ predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdNEQ applies the NEQ predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdIn applies the In predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBorrowValueInUsd), v...))
	})
}

// BorrowValueInUsdNotIn applies the NotIn predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBorrowValueInUsd), v...))
	})
}

// BorrowValueInUsdGT applies the GT predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdGTE applies the GTE predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdLT applies the LT predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdLTE applies the LTE predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdContains applies the Contains predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdHasPrefix applies the HasPrefix predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdHasSuffix applies the HasSuffix predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdEqualFold applies the EqualFold predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBorrowValueInUsd), v))
	})
}

// BorrowValueInUsdContainsFold applies the ContainsFold predicate on the "borrow_value_in_usd" field.
func BorrowValueInUsdContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBorrowValueInUsd), v))
	})
}

// UnderlyingPriceUsdEQ applies the EQ predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdNEQ applies the NEQ predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdNEQ(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdIn applies the In predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnderlyingPriceUsd), v...))
	})
}

// UnderlyingPriceUsdNotIn applies the NotIn predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdNotIn(vs ...string) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnderlyingPriceUsd), v...))
	})
}

// UnderlyingPriceUsdGT applies the GT predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdGT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdGTE applies the GTE predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdGTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdLT applies the LT predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdLT(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdLTE applies the LTE predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdLTE(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdContains applies the Contains predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdContains(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdHasPrefix applies the HasPrefix predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdHasPrefix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdHasSuffix applies the HasSuffix predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdHasSuffix(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdEqualFold applies the EqualFold predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdEqualFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// UnderlyingPriceUsdContainsFold applies the ContainsFold predicate on the "underlying_price_usd" field.
func UnderlyingPriceUsdContainsFold(v string) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnderlyingPriceUsd), v))
	})
}

// BlockNumberEQ applies the EQ predicate on the "block_number" field.
func BlockNumberEQ(v uint64) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberNEQ applies the NEQ predicate on the "block_number" field.
func BlockNumberNEQ(v uint64) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberIn applies the In predicate on the "block_number" field.
func BlockNumberIn(vs ...uint64) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBlockNumber), v...))
	})
}

// BlockNumberNotIn applies the NotIn predicate on the "block_number" field.
func BlockNumberNotIn(vs ...uint64) predicate.AccountCToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountCToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBlockNumber), v...))
	})
}

// BlockNumberGT applies the GT predicate on the "block_number" field.
func BlockNumberGT(v uint64) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberGTE applies the GTE predicate on the "block_number" field.
func BlockNumberGTE(v uint64) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberLT applies the LT predicate on the "block_number" field.
func BlockNumberLT(v uint64) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberLTE applies the LTE predicate on the "block_number" field.
func BlockNumberLTE(v uint64) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlockNumber), v))
	})
}

// HasAccount applies the HasEdge predicate on the "account" edge.
func HasAccount() predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccountTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountWith applies the HasEdge predicate on the "account" edge with a given conditions (other predicates).
func HasAccountWith(preds ...predicate.Account) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccountInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccountTable, AccountColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccountCToken) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccountCToken) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountCToken) predicate.AccountCToken {
	return predicate.AccountCToken(func(s *sql.Selector) {
		p(s.Not())
	})
}
