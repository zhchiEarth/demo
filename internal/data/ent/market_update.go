// Code generated by entc, DO NOT EDIT.

package ent

import (
	"compound/internal/data/ent/market"
	"compound/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MarketUpdate is the builder for updating Market entities.
type MarketUpdate struct {
	config
	hooks    []Hook
	mutation *MarketMutation
}

// Where appends a list predicates to the MarketUpdate builder.
func (mu *MarketUpdate) Where(ps ...predicate.Market) *MarketUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MarketUpdate) SetUpdateTime(t time.Time) *MarketUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetAddress sets the "address" field.
func (mu *MarketUpdate) SetAddress(s string) *MarketUpdate {
	mu.mutation.SetAddress(s)
	return mu
}

// SetSymbol sets the "symbol" field.
func (mu *MarketUpdate) SetSymbol(s string) *MarketUpdate {
	mu.mutation.SetSymbol(s)
	return mu
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableSymbol(s *string) *MarketUpdate {
	if s != nil {
		mu.SetSymbol(*s)
	}
	return mu
}

// SetName sets the "name" field.
func (mu *MarketUpdate) SetName(s string) *MarketUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableName(s *string) *MarketUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetBorrowIndex sets the "borrow_index" field.
func (mu *MarketUpdate) SetBorrowIndex(s string) *MarketUpdate {
	mu.mutation.SetBorrowIndex(s)
	return mu
}

// SetNillableBorrowIndex sets the "borrow_index" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableBorrowIndex(s *string) *MarketUpdate {
	if s != nil {
		mu.SetBorrowIndex(*s)
	}
	return mu
}

// SetBorrowRate sets the "borrow_rate" field.
func (mu *MarketUpdate) SetBorrowRate(s string) *MarketUpdate {
	mu.mutation.SetBorrowRate(s)
	return mu
}

// SetNillableBorrowRate sets the "borrow_rate" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableBorrowRate(s *string) *MarketUpdate {
	if s != nil {
		mu.SetBorrowRate(*s)
	}
	return mu
}

// SetSupplyRate sets the "supply_rate" field.
func (mu *MarketUpdate) SetSupplyRate(s string) *MarketUpdate {
	mu.mutation.SetSupplyRate(s)
	return mu
}

// SetNillableSupplyRate sets the "supply_rate" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableSupplyRate(s *string) *MarketUpdate {
	if s != nil {
		mu.SetSupplyRate(*s)
	}
	return mu
}

// SetCash sets the "cash" field.
func (mu *MarketUpdate) SetCash(s string) *MarketUpdate {
	mu.mutation.SetCash(s)
	return mu
}

// SetNillableCash sets the "cash" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableCash(s *string) *MarketUpdate {
	if s != nil {
		mu.SetCash(*s)
	}
	return mu
}

// SetCollateralFactor sets the "collateral_factor" field.
func (mu *MarketUpdate) SetCollateralFactor(s string) *MarketUpdate {
	mu.mutation.SetCollateralFactor(s)
	return mu
}

// SetNillableCollateralFactor sets the "collateral_factor" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableCollateralFactor(s *string) *MarketUpdate {
	if s != nil {
		mu.SetCollateralFactor(*s)
	}
	return mu
}

// SetExchangeRate sets the "exchange_rate" field.
func (mu *MarketUpdate) SetExchangeRate(s string) *MarketUpdate {
	mu.mutation.SetExchangeRate(s)
	return mu
}

// SetNillableExchangeRate sets the "exchange_rate" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableExchangeRate(s *string) *MarketUpdate {
	if s != nil {
		mu.SetExchangeRate(*s)
	}
	return mu
}

// SetReserveFactor sets the "reserve_factor" field.
func (mu *MarketUpdate) SetReserveFactor(s string) *MarketUpdate {
	mu.mutation.SetReserveFactor(s)
	return mu
}

// SetNillableReserveFactor sets the "reserve_factor" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableReserveFactor(s *string) *MarketUpdate {
	if s != nil {
		mu.SetReserveFactor(*s)
	}
	return mu
}

// SetReserves sets the "reserves" field.
func (mu *MarketUpdate) SetReserves(s string) *MarketUpdate {
	mu.mutation.SetReserves(s)
	return mu
}

// SetNillableReserves sets the "reserves" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableReserves(s *string) *MarketUpdate {
	if s != nil {
		mu.SetReserves(*s)
	}
	return mu
}

// SetTotalBorrows sets the "total_borrows" field.
func (mu *MarketUpdate) SetTotalBorrows(s string) *MarketUpdate {
	mu.mutation.SetTotalBorrows(s)
	return mu
}

// SetNillableTotalBorrows sets the "total_borrows" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableTotalBorrows(s *string) *MarketUpdate {
	if s != nil {
		mu.SetTotalBorrows(*s)
	}
	return mu
}

// SetTotalSupply sets the "total_supply" field.
func (mu *MarketUpdate) SetTotalSupply(s string) *MarketUpdate {
	mu.mutation.SetTotalSupply(s)
	return mu
}

// SetNillableTotalSupply sets the "total_supply" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableTotalSupply(s *string) *MarketUpdate {
	if s != nil {
		mu.SetTotalSupply(*s)
	}
	return mu
}

// SetUnderlyingAddress sets the "underlying_address" field.
func (mu *MarketUpdate) SetUnderlyingAddress(s string) *MarketUpdate {
	mu.mutation.SetUnderlyingAddress(s)
	return mu
}

// SetNillableUnderlyingAddress sets the "underlying_address" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableUnderlyingAddress(s *string) *MarketUpdate {
	if s != nil {
		mu.SetUnderlyingAddress(*s)
	}
	return mu
}

// SetUnderlyingName sets the "underlying_name" field.
func (mu *MarketUpdate) SetUnderlyingName(s string) *MarketUpdate {
	mu.mutation.SetUnderlyingName(s)
	return mu
}

// SetNillableUnderlyingName sets the "underlying_name" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableUnderlyingName(s *string) *MarketUpdate {
	if s != nil {
		mu.SetUnderlyingName(*s)
	}
	return mu
}

// SetUnderlyingSymbol sets the "underlying_symbol" field.
func (mu *MarketUpdate) SetUnderlyingSymbol(s string) *MarketUpdate {
	mu.mutation.SetUnderlyingSymbol(s)
	return mu
}

// SetNillableUnderlyingSymbol sets the "underlying_symbol" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableUnderlyingSymbol(s *string) *MarketUpdate {
	if s != nil {
		mu.SetUnderlyingSymbol(*s)
	}
	return mu
}

// SetUnderlyingPrice sets the "underlying_price" field.
func (mu *MarketUpdate) SetUnderlyingPrice(s string) *MarketUpdate {
	mu.mutation.SetUnderlyingPrice(s)
	return mu
}

// SetNillableUnderlyingPrice sets the "underlying_price" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableUnderlyingPrice(s *string) *MarketUpdate {
	if s != nil {
		mu.SetUnderlyingPrice(*s)
	}
	return mu
}

// SetUnderlyingDecimals sets the "underlying_decimals" field.
func (mu *MarketUpdate) SetUnderlyingDecimals(u uint32) *MarketUpdate {
	mu.mutation.ResetUnderlyingDecimals()
	mu.mutation.SetUnderlyingDecimals(u)
	return mu
}

// SetNillableUnderlyingDecimals sets the "underlying_decimals" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableUnderlyingDecimals(u *uint32) *MarketUpdate {
	if u != nil {
		mu.SetUnderlyingDecimals(*u)
	}
	return mu
}

// AddUnderlyingDecimals adds u to the "underlying_decimals" field.
func (mu *MarketUpdate) AddUnderlyingDecimals(u int32) *MarketUpdate {
	mu.mutation.AddUnderlyingDecimals(u)
	return mu
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (mu *MarketUpdate) SetUnderlyingPriceUsd(s string) *MarketUpdate {
	mu.mutation.SetUnderlyingPriceUsd(s)
	return mu
}

// SetNillableUnderlyingPriceUsd sets the "underlying_price_usd" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableUnderlyingPriceUsd(s *string) *MarketUpdate {
	if s != nil {
		mu.SetUnderlyingPriceUsd(*s)
	}
	return mu
}

// SetBlockNumber sets the "block_number" field.
func (mu *MarketUpdate) SetBlockNumber(u uint64) *MarketUpdate {
	mu.mutation.ResetBlockNumber()
	mu.mutation.SetBlockNumber(u)
	return mu
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableBlockNumber(u *uint64) *MarketUpdate {
	if u != nil {
		mu.SetBlockNumber(*u)
	}
	return mu
}

// AddBlockNumber adds u to the "block_number" field.
func (mu *MarketUpdate) AddBlockNumber(u int64) *MarketUpdate {
	mu.mutation.AddBlockNumber(u)
	return mu
}

// SetBlockTimestamp sets the "block_timestamp" field.
func (mu *MarketUpdate) SetBlockTimestamp(u uint32) *MarketUpdate {
	mu.mutation.ResetBlockTimestamp()
	mu.mutation.SetBlockTimestamp(u)
	return mu
}

// SetNillableBlockTimestamp sets the "block_timestamp" field if the given value is not nil.
func (mu *MarketUpdate) SetNillableBlockTimestamp(u *uint32) *MarketUpdate {
	if u != nil {
		mu.SetBlockTimestamp(*u)
	}
	return mu
}

// AddBlockTimestamp adds u to the "block_timestamp" field.
func (mu *MarketUpdate) AddBlockTimestamp(u int32) *MarketUpdate {
	mu.mutation.AddBlockTimestamp(u)
	return mu
}

// Mutation returns the MarketMutation object of the builder.
func (mu *MarketUpdate) Mutation() *MarketMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MarketUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MarketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MarketUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MarketUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MarketUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MarketUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := market.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

func (mu *MarketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   market.Table,
			Columns: market.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: market.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: market.FieldUpdateTime,
		})
	}
	if value, ok := mu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldAddress,
		})
	}
	if value, ok := mu.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldSymbol,
		})
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldName,
		})
	}
	if value, ok := mu.mutation.BorrowIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldBorrowIndex,
		})
	}
	if value, ok := mu.mutation.BorrowRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldBorrowRate,
		})
	}
	if value, ok := mu.mutation.SupplyRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldSupplyRate,
		})
	}
	if value, ok := mu.mutation.Cash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldCash,
		})
	}
	if value, ok := mu.mutation.CollateralFactor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldCollateralFactor,
		})
	}
	if value, ok := mu.mutation.ExchangeRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldExchangeRate,
		})
	}
	if value, ok := mu.mutation.ReserveFactor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldReserveFactor,
		})
	}
	if value, ok := mu.mutation.Reserves(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldReserves,
		})
	}
	if value, ok := mu.mutation.TotalBorrows(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldTotalBorrows,
		})
	}
	if value, ok := mu.mutation.TotalSupply(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldTotalSupply,
		})
	}
	if value, ok := mu.mutation.UnderlyingAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingAddress,
		})
	}
	if value, ok := mu.mutation.UnderlyingName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingName,
		})
	}
	if value, ok := mu.mutation.UnderlyingSymbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingSymbol,
		})
	}
	if value, ok := mu.mutation.UnderlyingPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingPrice,
		})
	}
	if value, ok := mu.mutation.UnderlyingDecimals(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldUnderlyingDecimals,
		})
	}
	if value, ok := mu.mutation.AddedUnderlyingDecimals(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldUnderlyingDecimals,
		})
	}
	if value, ok := mu.mutation.UnderlyingPriceUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingPriceUsd,
		})
	}
	if value, ok := mu.mutation.BlockNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: market.FieldBlockNumber,
		})
	}
	if value, ok := mu.mutation.AddedBlockNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: market.FieldBlockNumber,
		})
	}
	if value, ok := mu.mutation.BlockTimestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldBlockTimestamp,
		})
	}
	if value, ok := mu.mutation.AddedBlockTimestamp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldBlockTimestamp,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{market.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MarketUpdateOne is the builder for updating a single Market entity.
type MarketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MarketMutation
}

// SetUpdateTime sets the "update_time" field.
func (muo *MarketUpdateOne) SetUpdateTime(t time.Time) *MarketUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetAddress sets the "address" field.
func (muo *MarketUpdateOne) SetAddress(s string) *MarketUpdateOne {
	muo.mutation.SetAddress(s)
	return muo
}

// SetSymbol sets the "symbol" field.
func (muo *MarketUpdateOne) SetSymbol(s string) *MarketUpdateOne {
	muo.mutation.SetSymbol(s)
	return muo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableSymbol(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetSymbol(*s)
	}
	return muo
}

// SetName sets the "name" field.
func (muo *MarketUpdateOne) SetName(s string) *MarketUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableName(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetBorrowIndex sets the "borrow_index" field.
func (muo *MarketUpdateOne) SetBorrowIndex(s string) *MarketUpdateOne {
	muo.mutation.SetBorrowIndex(s)
	return muo
}

// SetNillableBorrowIndex sets the "borrow_index" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableBorrowIndex(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetBorrowIndex(*s)
	}
	return muo
}

// SetBorrowRate sets the "borrow_rate" field.
func (muo *MarketUpdateOne) SetBorrowRate(s string) *MarketUpdateOne {
	muo.mutation.SetBorrowRate(s)
	return muo
}

// SetNillableBorrowRate sets the "borrow_rate" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableBorrowRate(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetBorrowRate(*s)
	}
	return muo
}

// SetSupplyRate sets the "supply_rate" field.
func (muo *MarketUpdateOne) SetSupplyRate(s string) *MarketUpdateOne {
	muo.mutation.SetSupplyRate(s)
	return muo
}

// SetNillableSupplyRate sets the "supply_rate" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableSupplyRate(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetSupplyRate(*s)
	}
	return muo
}

// SetCash sets the "cash" field.
func (muo *MarketUpdateOne) SetCash(s string) *MarketUpdateOne {
	muo.mutation.SetCash(s)
	return muo
}

// SetNillableCash sets the "cash" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableCash(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetCash(*s)
	}
	return muo
}

// SetCollateralFactor sets the "collateral_factor" field.
func (muo *MarketUpdateOne) SetCollateralFactor(s string) *MarketUpdateOne {
	muo.mutation.SetCollateralFactor(s)
	return muo
}

// SetNillableCollateralFactor sets the "collateral_factor" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableCollateralFactor(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetCollateralFactor(*s)
	}
	return muo
}

// SetExchangeRate sets the "exchange_rate" field.
func (muo *MarketUpdateOne) SetExchangeRate(s string) *MarketUpdateOne {
	muo.mutation.SetExchangeRate(s)
	return muo
}

// SetNillableExchangeRate sets the "exchange_rate" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableExchangeRate(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetExchangeRate(*s)
	}
	return muo
}

// SetReserveFactor sets the "reserve_factor" field.
func (muo *MarketUpdateOne) SetReserveFactor(s string) *MarketUpdateOne {
	muo.mutation.SetReserveFactor(s)
	return muo
}

// SetNillableReserveFactor sets the "reserve_factor" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableReserveFactor(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetReserveFactor(*s)
	}
	return muo
}

// SetReserves sets the "reserves" field.
func (muo *MarketUpdateOne) SetReserves(s string) *MarketUpdateOne {
	muo.mutation.SetReserves(s)
	return muo
}

// SetNillableReserves sets the "reserves" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableReserves(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetReserves(*s)
	}
	return muo
}

// SetTotalBorrows sets the "total_borrows" field.
func (muo *MarketUpdateOne) SetTotalBorrows(s string) *MarketUpdateOne {
	muo.mutation.SetTotalBorrows(s)
	return muo
}

// SetNillableTotalBorrows sets the "total_borrows" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableTotalBorrows(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetTotalBorrows(*s)
	}
	return muo
}

// SetTotalSupply sets the "total_supply" field.
func (muo *MarketUpdateOne) SetTotalSupply(s string) *MarketUpdateOne {
	muo.mutation.SetTotalSupply(s)
	return muo
}

// SetNillableTotalSupply sets the "total_supply" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableTotalSupply(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetTotalSupply(*s)
	}
	return muo
}

// SetUnderlyingAddress sets the "underlying_address" field.
func (muo *MarketUpdateOne) SetUnderlyingAddress(s string) *MarketUpdateOne {
	muo.mutation.SetUnderlyingAddress(s)
	return muo
}

// SetNillableUnderlyingAddress sets the "underlying_address" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableUnderlyingAddress(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetUnderlyingAddress(*s)
	}
	return muo
}

// SetUnderlyingName sets the "underlying_name" field.
func (muo *MarketUpdateOne) SetUnderlyingName(s string) *MarketUpdateOne {
	muo.mutation.SetUnderlyingName(s)
	return muo
}

// SetNillableUnderlyingName sets the "underlying_name" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableUnderlyingName(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetUnderlyingName(*s)
	}
	return muo
}

// SetUnderlyingSymbol sets the "underlying_symbol" field.
func (muo *MarketUpdateOne) SetUnderlyingSymbol(s string) *MarketUpdateOne {
	muo.mutation.SetUnderlyingSymbol(s)
	return muo
}

// SetNillableUnderlyingSymbol sets the "underlying_symbol" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableUnderlyingSymbol(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetUnderlyingSymbol(*s)
	}
	return muo
}

// SetUnderlyingPrice sets the "underlying_price" field.
func (muo *MarketUpdateOne) SetUnderlyingPrice(s string) *MarketUpdateOne {
	muo.mutation.SetUnderlyingPrice(s)
	return muo
}

// SetNillableUnderlyingPrice sets the "underlying_price" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableUnderlyingPrice(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetUnderlyingPrice(*s)
	}
	return muo
}

// SetUnderlyingDecimals sets the "underlying_decimals" field.
func (muo *MarketUpdateOne) SetUnderlyingDecimals(u uint32) *MarketUpdateOne {
	muo.mutation.ResetUnderlyingDecimals()
	muo.mutation.SetUnderlyingDecimals(u)
	return muo
}

// SetNillableUnderlyingDecimals sets the "underlying_decimals" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableUnderlyingDecimals(u *uint32) *MarketUpdateOne {
	if u != nil {
		muo.SetUnderlyingDecimals(*u)
	}
	return muo
}

// AddUnderlyingDecimals adds u to the "underlying_decimals" field.
func (muo *MarketUpdateOne) AddUnderlyingDecimals(u int32) *MarketUpdateOne {
	muo.mutation.AddUnderlyingDecimals(u)
	return muo
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (muo *MarketUpdateOne) SetUnderlyingPriceUsd(s string) *MarketUpdateOne {
	muo.mutation.SetUnderlyingPriceUsd(s)
	return muo
}

// SetNillableUnderlyingPriceUsd sets the "underlying_price_usd" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableUnderlyingPriceUsd(s *string) *MarketUpdateOne {
	if s != nil {
		muo.SetUnderlyingPriceUsd(*s)
	}
	return muo
}

// SetBlockNumber sets the "block_number" field.
func (muo *MarketUpdateOne) SetBlockNumber(u uint64) *MarketUpdateOne {
	muo.mutation.ResetBlockNumber()
	muo.mutation.SetBlockNumber(u)
	return muo
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableBlockNumber(u *uint64) *MarketUpdateOne {
	if u != nil {
		muo.SetBlockNumber(*u)
	}
	return muo
}

// AddBlockNumber adds u to the "block_number" field.
func (muo *MarketUpdateOne) AddBlockNumber(u int64) *MarketUpdateOne {
	muo.mutation.AddBlockNumber(u)
	return muo
}

// SetBlockTimestamp sets the "block_timestamp" field.
func (muo *MarketUpdateOne) SetBlockTimestamp(u uint32) *MarketUpdateOne {
	muo.mutation.ResetBlockTimestamp()
	muo.mutation.SetBlockTimestamp(u)
	return muo
}

// SetNillableBlockTimestamp sets the "block_timestamp" field if the given value is not nil.
func (muo *MarketUpdateOne) SetNillableBlockTimestamp(u *uint32) *MarketUpdateOne {
	if u != nil {
		muo.SetBlockTimestamp(*u)
	}
	return muo
}

// AddBlockTimestamp adds u to the "block_timestamp" field.
func (muo *MarketUpdateOne) AddBlockTimestamp(u int32) *MarketUpdateOne {
	muo.mutation.AddBlockTimestamp(u)
	return muo
}

// Mutation returns the MarketMutation object of the builder.
func (muo *MarketUpdateOne) Mutation() *MarketMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MarketUpdateOne) Select(field string, fields ...string) *MarketUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Market entity.
func (muo *MarketUpdateOne) Save(ctx context.Context) (*Market, error) {
	var (
		err  error
		node *Market
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MarketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MarketUpdateOne) SaveX(ctx context.Context) *Market {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MarketUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MarketUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MarketUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := market.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

func (muo *MarketUpdateOne) sqlSave(ctx context.Context) (_node *Market, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   market.Table,
			Columns: market.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: market.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Market.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, market.FieldID)
		for _, f := range fields {
			if !market.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != market.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: market.FieldUpdateTime,
		})
	}
	if value, ok := muo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldAddress,
		})
	}
	if value, ok := muo.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldSymbol,
		})
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldName,
		})
	}
	if value, ok := muo.mutation.BorrowIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldBorrowIndex,
		})
	}
	if value, ok := muo.mutation.BorrowRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldBorrowRate,
		})
	}
	if value, ok := muo.mutation.SupplyRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldSupplyRate,
		})
	}
	if value, ok := muo.mutation.Cash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldCash,
		})
	}
	if value, ok := muo.mutation.CollateralFactor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldCollateralFactor,
		})
	}
	if value, ok := muo.mutation.ExchangeRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldExchangeRate,
		})
	}
	if value, ok := muo.mutation.ReserveFactor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldReserveFactor,
		})
	}
	if value, ok := muo.mutation.Reserves(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldReserves,
		})
	}
	if value, ok := muo.mutation.TotalBorrows(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldTotalBorrows,
		})
	}
	if value, ok := muo.mutation.TotalSupply(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldTotalSupply,
		})
	}
	if value, ok := muo.mutation.UnderlyingAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingAddress,
		})
	}
	if value, ok := muo.mutation.UnderlyingName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingName,
		})
	}
	if value, ok := muo.mutation.UnderlyingSymbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingSymbol,
		})
	}
	if value, ok := muo.mutation.UnderlyingPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingPrice,
		})
	}
	if value, ok := muo.mutation.UnderlyingDecimals(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldUnderlyingDecimals,
		})
	}
	if value, ok := muo.mutation.AddedUnderlyingDecimals(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldUnderlyingDecimals,
		})
	}
	if value, ok := muo.mutation.UnderlyingPriceUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingPriceUsd,
		})
	}
	if value, ok := muo.mutation.BlockNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: market.FieldBlockNumber,
		})
	}
	if value, ok := muo.mutation.AddedBlockNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: market.FieldBlockNumber,
		})
	}
	if value, ok := muo.mutation.BlockTimestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldBlockTimestamp,
		})
	}
	if value, ok := muo.mutation.AddedBlockTimestamp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldBlockTimestamp,
		})
	}
	_node = &Market{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{market.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
