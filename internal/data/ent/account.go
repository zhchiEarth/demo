// Code generated by entc, DO NOT EDIT.

package ent

import (
	"compound/internal/data/ent/account"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Address holds the value of the "address" field.
	// 用户地址
	Address string `json:"address,omitempty"`
	// HasBorrowed holds the value of the "has_borrowed" field.
	HasBorrowed bool `json:"has_borrowed,omitempty"`
	// CountLiquidated holds the value of the "count_liquidated" field.
	// Count user has been liquidated
	CountLiquidated uint32 `json:"count_liquidated,omitempty"`
	// CountLiquidator holds the value of the "count_liquidator" field.
	// Count user has liquidated others
	CountLiquidator uint32 `json:"count_liquidator,omitempty"`
	// Health holds the value of the "health" field.
	// 用户健康度 total_collateral_value_in_eth / total_borrow_value_in_eth。如果此值小于 1.0，则该帐户将被清算
	Health string `json:"health,omitempty"`
	// TotalCollateralValueInUsd holds the value of the "total_collateral_value_in_usd" field.
	// 账户提供的所有抵押品的价值。计算为持有的cToken • 汇率 • 抵押因子。注：资产可以提供并获得利息，不计入抵押品
	TotalCollateralValueInUsd string `json:"total_collateral_value_in_usd,omitempty"`
	// TotalBorrowValueInUsd holds the value of the "total_borrow_value_in_usd" field.
	// 累积利息的所有未偿还借款的价值
	TotalBorrowValueInUsd string `json:"total_borrow_value_in_usd,omitempty"`
	// BlockNumber holds the value of the "block_number" field.
	// 区块高度
	BlockNumber uint64 `json:"block_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountQuery when eager-loading is set.
	Edges AccountEdges `json:"edges"`
}

// AccountEdges holds the relations/edges for other nodes in the graph.
type AccountEdges struct {
	// Tokens holds the value of the tokens edge.
	Tokens []*AccountCToken `json:"tokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TokensOrErr returns the Tokens value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) TokensOrErr() ([]*AccountCToken, error) {
	if e.loadedTypes[0] {
		return e.Tokens, nil
	}
	return nil, &NotLoadedError{edge: "tokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldHasBorrowed:
			values[i] = new(sql.NullBool)
		case account.FieldID, account.FieldCountLiquidated, account.FieldCountLiquidator, account.FieldBlockNumber:
			values[i] = new(sql.NullInt64)
		case account.FieldAddress, account.FieldHealth, account.FieldTotalCollateralValueInUsd, account.FieldTotalBorrowValueInUsd:
			values[i] = new(sql.NullString)
		case account.FieldCreateTime, account.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Account", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case account.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case account.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case account.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				a.Address = value.String
			}
		case account.FieldHasBorrowed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_borrowed", values[i])
			} else if value.Valid {
				a.HasBorrowed = value.Bool
			}
		case account.FieldCountLiquidated:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count_liquidated", values[i])
			} else if value.Valid {
				a.CountLiquidated = uint32(value.Int64)
			}
		case account.FieldCountLiquidator:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count_liquidator", values[i])
			} else if value.Valid {
				a.CountLiquidator = uint32(value.Int64)
			}
		case account.FieldHealth:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field health", values[i])
			} else if value.Valid {
				a.Health = value.String
			}
		case account.FieldTotalCollateralValueInUsd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field total_collateral_value_in_usd", values[i])
			} else if value.Valid {
				a.TotalCollateralValueInUsd = value.String
			}
		case account.FieldTotalBorrowValueInUsd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field total_borrow_value_in_usd", values[i])
			} else if value.Valid {
				a.TotalBorrowValueInUsd = value.String
			}
		case account.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_number", values[i])
			} else if value.Valid {
				a.BlockNumber = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTokens queries the "tokens" edge of the Account entity.
func (a *Account) QueryTokens() *AccountCTokenQuery {
	return (&AccountClient{config: a.config}).QueryTokens(a)
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return (&AccountClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", address=")
	builder.WriteString(a.Address)
	builder.WriteString(", has_borrowed=")
	builder.WriteString(fmt.Sprintf("%v", a.HasBorrowed))
	builder.WriteString(", count_liquidated=")
	builder.WriteString(fmt.Sprintf("%v", a.CountLiquidated))
	builder.WriteString(", count_liquidator=")
	builder.WriteString(fmt.Sprintf("%v", a.CountLiquidator))
	builder.WriteString(", health=")
	builder.WriteString(a.Health)
	builder.WriteString(", total_collateral_value_in_usd=")
	builder.WriteString(a.TotalCollateralValueInUsd)
	builder.WriteString(", total_borrow_value_in_usd=")
	builder.WriteString(a.TotalBorrowValueInUsd)
	builder.WriteString(", block_number=")
	builder.WriteString(fmt.Sprintf("%v", a.BlockNumber))
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account

func (a Accounts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
