// Code generated by entc, DO NOT EDIT.

package ent

import (
	"compound/internal/data/ent/account"
	"compound/internal/data/ent/accountctoken"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ac *AccountCreate) SetCreateTime(t time.Time) *AccountCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCreateTime(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AccountCreate) SetUpdateTime(t time.Time) *AccountCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUpdateTime(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetAddress sets the "address" field.
func (ac *AccountCreate) SetAddress(s string) *AccountCreate {
	ac.mutation.SetAddress(s)
	return ac
}

// SetHasBorrowed sets the "has_borrowed" field.
func (ac *AccountCreate) SetHasBorrowed(b bool) *AccountCreate {
	ac.mutation.SetHasBorrowed(b)
	return ac
}

// SetNillableHasBorrowed sets the "has_borrowed" field if the given value is not nil.
func (ac *AccountCreate) SetNillableHasBorrowed(b *bool) *AccountCreate {
	if b != nil {
		ac.SetHasBorrowed(*b)
	}
	return ac
}

// SetCountLiquidated sets the "count_liquidated" field.
func (ac *AccountCreate) SetCountLiquidated(u uint32) *AccountCreate {
	ac.mutation.SetCountLiquidated(u)
	return ac
}

// SetNillableCountLiquidated sets the "count_liquidated" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCountLiquidated(u *uint32) *AccountCreate {
	if u != nil {
		ac.SetCountLiquidated(*u)
	}
	return ac
}

// SetCountLiquidator sets the "count_liquidator" field.
func (ac *AccountCreate) SetCountLiquidator(u uint32) *AccountCreate {
	ac.mutation.SetCountLiquidator(u)
	return ac
}

// SetNillableCountLiquidator sets the "count_liquidator" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCountLiquidator(u *uint32) *AccountCreate {
	if u != nil {
		ac.SetCountLiquidator(*u)
	}
	return ac
}

// SetHealth sets the "health" field.
func (ac *AccountCreate) SetHealth(s string) *AccountCreate {
	ac.mutation.SetHealth(s)
	return ac
}

// SetNillableHealth sets the "health" field if the given value is not nil.
func (ac *AccountCreate) SetNillableHealth(s *string) *AccountCreate {
	if s != nil {
		ac.SetHealth(*s)
	}
	return ac
}

// SetTotalCollateralValueInUsd sets the "total_collateral_value_in_usd" field.
func (ac *AccountCreate) SetTotalCollateralValueInUsd(s string) *AccountCreate {
	ac.mutation.SetTotalCollateralValueInUsd(s)
	return ac
}

// SetNillableTotalCollateralValueInUsd sets the "total_collateral_value_in_usd" field if the given value is not nil.
func (ac *AccountCreate) SetNillableTotalCollateralValueInUsd(s *string) *AccountCreate {
	if s != nil {
		ac.SetTotalCollateralValueInUsd(*s)
	}
	return ac
}

// SetTotalBorrowValueInUsd sets the "total_borrow_value_in_usd" field.
func (ac *AccountCreate) SetTotalBorrowValueInUsd(s string) *AccountCreate {
	ac.mutation.SetTotalBorrowValueInUsd(s)
	return ac
}

// SetNillableTotalBorrowValueInUsd sets the "total_borrow_value_in_usd" field if the given value is not nil.
func (ac *AccountCreate) SetNillableTotalBorrowValueInUsd(s *string) *AccountCreate {
	if s != nil {
		ac.SetTotalBorrowValueInUsd(*s)
	}
	return ac
}

// SetBlockNumber sets the "block_number" field.
func (ac *AccountCreate) SetBlockNumber(u uint64) *AccountCreate {
	ac.mutation.SetBlockNumber(u)
	return ac
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (ac *AccountCreate) SetNillableBlockNumber(u *uint64) *AccountCreate {
	if u != nil {
		ac.SetBlockNumber(*u)
	}
	return ac
}

// AddTokenIDs adds the "tokens" edge to the AccountCToken entity by IDs.
func (ac *AccountCreate) AddTokenIDs(ids ...int) *AccountCreate {
	ac.mutation.AddTokenIDs(ids...)
	return ac
}

// AddTokens adds the "tokens" edges to the AccountCToken entity.
func (ac *AccountCreate) AddTokens(a ...*AccountCToken) *AccountCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddTokenIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccountCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := account.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := account.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.HasBorrowed(); !ok {
		v := account.DefaultHasBorrowed
		ac.mutation.SetHasBorrowed(v)
	}
	if _, ok := ac.mutation.CountLiquidated(); !ok {
		v := account.DefaultCountLiquidated
		ac.mutation.SetCountLiquidated(v)
	}
	if _, ok := ac.mutation.CountLiquidator(); !ok {
		v := account.DefaultCountLiquidator
		ac.mutation.SetCountLiquidator(v)
	}
	if _, ok := ac.mutation.Health(); !ok {
		v := account.DefaultHealth
		ac.mutation.SetHealth(v)
	}
	if _, ok := ac.mutation.TotalCollateralValueInUsd(); !ok {
		v := account.DefaultTotalCollateralValueInUsd
		ac.mutation.SetTotalCollateralValueInUsd(v)
	}
	if _, ok := ac.mutation.TotalBorrowValueInUsd(); !ok {
		v := account.DefaultTotalBorrowValueInUsd
		ac.mutation.SetTotalBorrowValueInUsd(v)
	}
	if _, ok := ac.mutation.BlockNumber(); !ok {
		v := account.DefaultBlockNumber
		ac.mutation.SetBlockNumber(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Account.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Account.update_time"`)}
	}
	if _, ok := ac.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Account.address"`)}
	}
	if _, ok := ac.mutation.HasBorrowed(); !ok {
		return &ValidationError{Name: "has_borrowed", err: errors.New(`ent: missing required field "Account.has_borrowed"`)}
	}
	if _, ok := ac.mutation.CountLiquidated(); !ok {
		return &ValidationError{Name: "count_liquidated", err: errors.New(`ent: missing required field "Account.count_liquidated"`)}
	}
	if _, ok := ac.mutation.CountLiquidator(); !ok {
		return &ValidationError{Name: "count_liquidator", err: errors.New(`ent: missing required field "Account.count_liquidator"`)}
	}
	if _, ok := ac.mutation.Health(); !ok {
		return &ValidationError{Name: "health", err: errors.New(`ent: missing required field "Account.health"`)}
	}
	if _, ok := ac.mutation.TotalCollateralValueInUsd(); !ok {
		return &ValidationError{Name: "total_collateral_value_in_usd", err: errors.New(`ent: missing required field "Account.total_collateral_value_in_usd"`)}
	}
	if _, ok := ac.mutation.TotalBorrowValueInUsd(); !ok {
		return &ValidationError{Name: "total_borrow_value_in_usd", err: errors.New(`ent: missing required field "Account.total_borrow_value_in_usd"`)}
	}
	if _, ok := ac.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "Account.block_number"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: account.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: account.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := ac.mutation.HasBorrowed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasBorrowed,
		})
		_node.HasBorrowed = value
	}
	if value, ok := ac.mutation.CountLiquidated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: account.FieldCountLiquidated,
		})
		_node.CountLiquidated = value
	}
	if value, ok := ac.mutation.CountLiquidator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: account.FieldCountLiquidator,
		})
		_node.CountLiquidator = value
	}
	if value, ok := ac.mutation.Health(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldHealth,
		})
		_node.Health = value
	}
	if value, ok := ac.mutation.TotalCollateralValueInUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldTotalCollateralValueInUsd,
		})
		_node.TotalCollateralValueInUsd = value
	}
	if value, ok := ac.mutation.TotalBorrowValueInUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldTotalBorrowValueInUsd,
		})
		_node.TotalBorrowValueInUsd = value
	}
	if value, ok := ac.mutation.BlockNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: account.FieldBlockNumber,
		})
		_node.BlockNumber = value
	}
	if nodes := ac.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TokensTable,
			Columns: []string{account.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountctoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AccountCreate) OnConflict(opts ...sql.ConflictOption) *AccountUpsertOne {
	ac.conflict = opts
	return &AccountUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AccountCreate) OnConflictColumns(columns ...string) *AccountUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertOne{
		create: ac,
	}
}

type (
	// AccountUpsertOne is the builder for "upsert"-ing
	//  one Account node.
	AccountUpsertOne struct {
		create *AccountCreate
	}

	// AccountUpsert is the "OnConflict" setter.
	AccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *AccountUpsert) SetCreateTime(v time.Time) *AccountUpsert {
	u.Set(account.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AccountUpsert) UpdateCreateTime() *AccountUpsert {
	u.SetExcluded(account.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AccountUpsert) SetUpdateTime(v time.Time) *AccountUpsert {
	u.Set(account.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AccountUpsert) UpdateUpdateTime() *AccountUpsert {
	u.SetExcluded(account.FieldUpdateTime)
	return u
}

// SetAddress sets the "address" field.
func (u *AccountUpsert) SetAddress(v string) *AccountUpsert {
	u.Set(account.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsert) UpdateAddress() *AccountUpsert {
	u.SetExcluded(account.FieldAddress)
	return u
}

// SetHasBorrowed sets the "has_borrowed" field.
func (u *AccountUpsert) SetHasBorrowed(v bool) *AccountUpsert {
	u.Set(account.FieldHasBorrowed, v)
	return u
}

// UpdateHasBorrowed sets the "has_borrowed" field to the value that was provided on create.
func (u *AccountUpsert) UpdateHasBorrowed() *AccountUpsert {
	u.SetExcluded(account.FieldHasBorrowed)
	return u
}

// SetCountLiquidated sets the "count_liquidated" field.
func (u *AccountUpsert) SetCountLiquidated(v uint32) *AccountUpsert {
	u.Set(account.FieldCountLiquidated, v)
	return u
}

// UpdateCountLiquidated sets the "count_liquidated" field to the value that was provided on create.
func (u *AccountUpsert) UpdateCountLiquidated() *AccountUpsert {
	u.SetExcluded(account.FieldCountLiquidated)
	return u
}

// AddCountLiquidated adds v to the "count_liquidated" field.
func (u *AccountUpsert) AddCountLiquidated(v uint32) *AccountUpsert {
	u.Add(account.FieldCountLiquidated, v)
	return u
}

// SetCountLiquidator sets the "count_liquidator" field.
func (u *AccountUpsert) SetCountLiquidator(v uint32) *AccountUpsert {
	u.Set(account.FieldCountLiquidator, v)
	return u
}

// UpdateCountLiquidator sets the "count_liquidator" field to the value that was provided on create.
func (u *AccountUpsert) UpdateCountLiquidator() *AccountUpsert {
	u.SetExcluded(account.FieldCountLiquidator)
	return u
}

// AddCountLiquidator adds v to the "count_liquidator" field.
func (u *AccountUpsert) AddCountLiquidator(v uint32) *AccountUpsert {
	u.Add(account.FieldCountLiquidator, v)
	return u
}

// SetHealth sets the "health" field.
func (u *AccountUpsert) SetHealth(v string) *AccountUpsert {
	u.Set(account.FieldHealth, v)
	return u
}

// UpdateHealth sets the "health" field to the value that was provided on create.
func (u *AccountUpsert) UpdateHealth() *AccountUpsert {
	u.SetExcluded(account.FieldHealth)
	return u
}

// SetTotalCollateralValueInUsd sets the "total_collateral_value_in_usd" field.
func (u *AccountUpsert) SetTotalCollateralValueInUsd(v string) *AccountUpsert {
	u.Set(account.FieldTotalCollateralValueInUsd, v)
	return u
}

// UpdateTotalCollateralValueInUsd sets the "total_collateral_value_in_usd" field to the value that was provided on create.
func (u *AccountUpsert) UpdateTotalCollateralValueInUsd() *AccountUpsert {
	u.SetExcluded(account.FieldTotalCollateralValueInUsd)
	return u
}

// SetTotalBorrowValueInUsd sets the "total_borrow_value_in_usd" field.
func (u *AccountUpsert) SetTotalBorrowValueInUsd(v string) *AccountUpsert {
	u.Set(account.FieldTotalBorrowValueInUsd, v)
	return u
}

// UpdateTotalBorrowValueInUsd sets the "total_borrow_value_in_usd" field to the value that was provided on create.
func (u *AccountUpsert) UpdateTotalBorrowValueInUsd() *AccountUpsert {
	u.SetExcluded(account.FieldTotalBorrowValueInUsd)
	return u
}

// SetBlockNumber sets the "block_number" field.
func (u *AccountUpsert) SetBlockNumber(v uint64) *AccountUpsert {
	u.Set(account.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *AccountUpsert) UpdateBlockNumber() *AccountUpsert {
	u.SetExcluded(account.FieldBlockNumber)
	return u
}

// AddBlockNumber adds v to the "block_number" field.
func (u *AccountUpsert) AddBlockNumber(v uint64) *AccountUpsert {
	u.Add(account.FieldBlockNumber, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AccountUpsertOne) UpdateNewValues() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(account.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Account.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AccountUpsertOne) Ignore() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertOne) DoNothing() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreate.OnConflict
// documentation for more info.
func (u *AccountUpsertOne) Update(set func(*AccountUpsert)) *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AccountUpsertOne) SetCreateTime(v time.Time) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateCreateTime() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AccountUpsertOne) SetUpdateTime(v time.Time) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateUpdateTime() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *AccountUpsertOne) SetAddress(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateAddress() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAddress()
	})
}

// SetHasBorrowed sets the "has_borrowed" field.
func (u *AccountUpsertOne) SetHasBorrowed(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetHasBorrowed(v)
	})
}

// UpdateHasBorrowed sets the "has_borrowed" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateHasBorrowed() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHasBorrowed()
	})
}

// SetCountLiquidated sets the "count_liquidated" field.
func (u *AccountUpsertOne) SetCountLiquidated(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetCountLiquidated(v)
	})
}

// AddCountLiquidated adds v to the "count_liquidated" field.
func (u *AccountUpsertOne) AddCountLiquidated(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddCountLiquidated(v)
	})
}

// UpdateCountLiquidated sets the "count_liquidated" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateCountLiquidated() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCountLiquidated()
	})
}

// SetCountLiquidator sets the "count_liquidator" field.
func (u *AccountUpsertOne) SetCountLiquidator(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetCountLiquidator(v)
	})
}

// AddCountLiquidator adds v to the "count_liquidator" field.
func (u *AccountUpsertOne) AddCountLiquidator(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddCountLiquidator(v)
	})
}

// UpdateCountLiquidator sets the "count_liquidator" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateCountLiquidator() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCountLiquidator()
	})
}

// SetHealth sets the "health" field.
func (u *AccountUpsertOne) SetHealth(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetHealth(v)
	})
}

// UpdateHealth sets the "health" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateHealth() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHealth()
	})
}

// SetTotalCollateralValueInUsd sets the "total_collateral_value_in_usd" field.
func (u *AccountUpsertOne) SetTotalCollateralValueInUsd(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetTotalCollateralValueInUsd(v)
	})
}

// UpdateTotalCollateralValueInUsd sets the "total_collateral_value_in_usd" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateTotalCollateralValueInUsd() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateTotalCollateralValueInUsd()
	})
}

// SetTotalBorrowValueInUsd sets the "total_borrow_value_in_usd" field.
func (u *AccountUpsertOne) SetTotalBorrowValueInUsd(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetTotalBorrowValueInUsd(v)
	})
}

// UpdateTotalBorrowValueInUsd sets the "total_borrow_value_in_usd" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateTotalBorrowValueInUsd() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateTotalBorrowValueInUsd()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *AccountUpsertOne) SetBlockNumber(v uint64) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *AccountUpsertOne) AddBlockNumber(v uint64) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateBlockNumber() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateBlockNumber()
	})
}

// Exec executes the query.
func (u *AccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	builders []*AccountCreate
	conflict []sql.ConflictOption
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountUpsertBulk {
	acb.conflict = opts
	return &AccountUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AccountCreateBulk) OnConflictColumns(columns ...string) *AccountUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertBulk{
		create: acb,
	}
}

// AccountUpsertBulk is the builder for "upsert"-ing
// a bulk of Account nodes.
type AccountUpsertBulk struct {
	create *AccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AccountUpsertBulk) UpdateNewValues() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(account.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AccountUpsertBulk) Ignore() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertBulk) DoNothing() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreateBulk.OnConflict
// documentation for more info.
func (u *AccountUpsertBulk) Update(set func(*AccountUpsert)) *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AccountUpsertBulk) SetCreateTime(v time.Time) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateCreateTime() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AccountUpsertBulk) SetUpdateTime(v time.Time) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateUpdateTime() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *AccountUpsertBulk) SetAddress(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateAddress() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAddress()
	})
}

// SetHasBorrowed sets the "has_borrowed" field.
func (u *AccountUpsertBulk) SetHasBorrowed(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetHasBorrowed(v)
	})
}

// UpdateHasBorrowed sets the "has_borrowed" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateHasBorrowed() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHasBorrowed()
	})
}

// SetCountLiquidated sets the "count_liquidated" field.
func (u *AccountUpsertBulk) SetCountLiquidated(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetCountLiquidated(v)
	})
}

// AddCountLiquidated adds v to the "count_liquidated" field.
func (u *AccountUpsertBulk) AddCountLiquidated(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddCountLiquidated(v)
	})
}

// UpdateCountLiquidated sets the "count_liquidated" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateCountLiquidated() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCountLiquidated()
	})
}

// SetCountLiquidator sets the "count_liquidator" field.
func (u *AccountUpsertBulk) SetCountLiquidator(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetCountLiquidator(v)
	})
}

// AddCountLiquidator adds v to the "count_liquidator" field.
func (u *AccountUpsertBulk) AddCountLiquidator(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddCountLiquidator(v)
	})
}

// UpdateCountLiquidator sets the "count_liquidator" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateCountLiquidator() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCountLiquidator()
	})
}

// SetHealth sets the "health" field.
func (u *AccountUpsertBulk) SetHealth(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetHealth(v)
	})
}

// UpdateHealth sets the "health" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateHealth() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHealth()
	})
}

// SetTotalCollateralValueInUsd sets the "total_collateral_value_in_usd" field.
func (u *AccountUpsertBulk) SetTotalCollateralValueInUsd(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetTotalCollateralValueInUsd(v)
	})
}

// UpdateTotalCollateralValueInUsd sets the "total_collateral_value_in_usd" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateTotalCollateralValueInUsd() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateTotalCollateralValueInUsd()
	})
}

// SetTotalBorrowValueInUsd sets the "total_borrow_value_in_usd" field.
func (u *AccountUpsertBulk) SetTotalBorrowValueInUsd(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetTotalBorrowValueInUsd(v)
	})
}

// UpdateTotalBorrowValueInUsd sets the "total_borrow_value_in_usd" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateTotalBorrowValueInUsd() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateTotalBorrowValueInUsd()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *AccountUpsertBulk) SetBlockNumber(v uint64) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *AccountUpsertBulk) AddBlockNumber(v uint64) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateBlockNumber() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateBlockNumber()
	})
}

// Exec executes the query.
func (u *AccountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
