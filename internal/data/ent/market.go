// Code generated by entc, DO NOT EDIT.

package ent

import (
	"compound/internal/data/ent/market"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Market is the model entity for the Market schema.
type Market struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Address holds the value of the "address" field.
	// ctoken地址 唯一的
	Address string `json:"address,omitempty"`
	// Symbol holds the value of the "symbol" field.
	// ctoken symbol
	Symbol string `json:"symbol,omitempty"`
	// Name holds the value of the "name" field.
	// ctoken name
	Name string `json:"name,omitempty"`
	// BorrowIndex holds the value of the "borrow_index" field.
	// 借款利息
	BorrowIndex string `json:"borrow_index,omitempty"`
	// BorrowRate holds the value of the "borrow_rate" field.
	// 借款利率
	BorrowRate string `json:"borrow_rate,omitempty"`
	// SupplyRate holds the value of the "supply_rate" field.
	// 供应利率
	SupplyRate string `json:"supply_rate,omitempty"`
	// Cash holds the value of the "cash" field.
	// 池子的流动性 cash
	Cash string `json:"cash,omitempty"`
	// CollateralFactor holds the value of the "collateral_factor" field.
	// 抵押率
	CollateralFactor string `json:"collateral_factor,omitempty"`
	// ExchangeRate holds the value of the "exchange_rate" field.
	//  兑换率
	ExchangeRate string `json:"exchange_rate,omitempty"`
	// ReserveFactor holds the value of the "reserve_factor" field.
	// 储备金率
	ReserveFactor string `json:"reserve_factor,omitempty"`
	// Reserves holds the value of the "reserves" field.
	// 储备金
	Reserves string `json:"reserves,omitempty"`
	// TotalBorrows holds the value of the "total_borrows" field.
	// 总借款
	TotalBorrows string `json:"total_borrows,omitempty"`
	// TotalSupply holds the value of the "total_supply" field.
	// 总供应
	TotalSupply string `json:"total_supply,omitempty"`
	// UnderlyingAddress holds the value of the "underlying_address" field.
	// token 地址
	UnderlyingAddress string `json:"underlying_address,omitempty"`
	// UnderlyingName holds the value of the "underlying_name" field.
	// token 名称
	UnderlyingName string `json:"underlying_name,omitempty"`
	// UnderlyingSymbol holds the value of the "underlying_symbol" field.
	// token 简称
	UnderlyingSymbol string `json:"underlying_symbol,omitempty"`
	// UnderlyingPrice holds the value of the "underlying_price" field.
	// token 兑换成eth的价格
	UnderlyingPrice string `json:"underlying_price,omitempty"`
	// UnderlyingDecimals holds the value of the "underlying_decimals" field.
	// token 位数
	UnderlyingDecimals uint32 `json:"underlying_decimals,omitempty"`
	// UnderlyingPriceUsd holds the value of the "underlying_price_usd" field.
	// token usd价格
	UnderlyingPriceUsd string `json:"underlying_price_usd,omitempty"`
	// BlockNumber holds the value of the "block_number" field.
	// 区块高度
	BlockNumber uint64 `json:"block_number,omitempty"`
	// BlockTimestamp holds the value of the "block_timestamp" field.
	// 区块时间戳
	BlockTimestamp uint32 `json:"block_timestamp,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Market) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case market.FieldID, market.FieldUnderlyingDecimals, market.FieldBlockNumber, market.FieldBlockTimestamp:
			values[i] = new(sql.NullInt64)
		case market.FieldAddress, market.FieldSymbol, market.FieldName, market.FieldBorrowIndex, market.FieldBorrowRate, market.FieldSupplyRate, market.FieldCash, market.FieldCollateralFactor, market.FieldExchangeRate, market.FieldReserveFactor, market.FieldReserves, market.FieldTotalBorrows, market.FieldTotalSupply, market.FieldUnderlyingAddress, market.FieldUnderlyingName, market.FieldUnderlyingSymbol, market.FieldUnderlyingPrice, market.FieldUnderlyingPriceUsd:
			values[i] = new(sql.NullString)
		case market.FieldCreateTime, market.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Market", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Market fields.
func (m *Market) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case market.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case market.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Time
			}
		case market.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				m.UpdateTime = value.Time
			}
		case market.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				m.Address = value.String
			}
		case market.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				m.Symbol = value.String
			}
		case market.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case market.FieldBorrowIndex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field borrow_index", values[i])
			} else if value.Valid {
				m.BorrowIndex = value.String
			}
		case market.FieldBorrowRate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field borrow_rate", values[i])
			} else if value.Valid {
				m.BorrowRate = value.String
			}
		case market.FieldSupplyRate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supply_rate", values[i])
			} else if value.Valid {
				m.SupplyRate = value.String
			}
		case market.FieldCash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cash", values[i])
			} else if value.Valid {
				m.Cash = value.String
			}
		case market.FieldCollateralFactor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collateral_factor", values[i])
			} else if value.Valid {
				m.CollateralFactor = value.String
			}
		case market.FieldExchangeRate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exchange_rate", values[i])
			} else if value.Valid {
				m.ExchangeRate = value.String
			}
		case market.FieldReserveFactor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reserve_factor", values[i])
			} else if value.Valid {
				m.ReserveFactor = value.String
			}
		case market.FieldReserves:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reserves", values[i])
			} else if value.Valid {
				m.Reserves = value.String
			}
		case market.FieldTotalBorrows:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field total_borrows", values[i])
			} else if value.Valid {
				m.TotalBorrows = value.String
			}
		case market.FieldTotalSupply:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field total_supply", values[i])
			} else if value.Valid {
				m.TotalSupply = value.String
			}
		case market.FieldUnderlyingAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field underlying_address", values[i])
			} else if value.Valid {
				m.UnderlyingAddress = value.String
			}
		case market.FieldUnderlyingName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field underlying_name", values[i])
			} else if value.Valid {
				m.UnderlyingName = value.String
			}
		case market.FieldUnderlyingSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field underlying_symbol", values[i])
			} else if value.Valid {
				m.UnderlyingSymbol = value.String
			}
		case market.FieldUnderlyingPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field underlying_price", values[i])
			} else if value.Valid {
				m.UnderlyingPrice = value.String
			}
		case market.FieldUnderlyingDecimals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field underlying_decimals", values[i])
			} else if value.Valid {
				m.UnderlyingDecimals = uint32(value.Int64)
			}
		case market.FieldUnderlyingPriceUsd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field underlying_price_usd", values[i])
			} else if value.Valid {
				m.UnderlyingPriceUsd = value.String
			}
		case market.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_number", values[i])
			} else if value.Valid {
				m.BlockNumber = uint64(value.Int64)
			}
		case market.FieldBlockTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_timestamp", values[i])
			} else if value.Valid {
				m.BlockTimestamp = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Market.
// Note that you need to call Market.Unwrap() before calling this method if this Market
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Market) Update() *MarketUpdateOne {
	return (&MarketClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Market entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Market) Unwrap() *Market {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Market is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Market) String() string {
	var builder strings.Builder
	builder.WriteString("Market(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", address=")
	builder.WriteString(m.Address)
	builder.WriteString(", symbol=")
	builder.WriteString(m.Symbol)
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", borrow_index=")
	builder.WriteString(m.BorrowIndex)
	builder.WriteString(", borrow_rate=")
	builder.WriteString(m.BorrowRate)
	builder.WriteString(", supply_rate=")
	builder.WriteString(m.SupplyRate)
	builder.WriteString(", cash=")
	builder.WriteString(m.Cash)
	builder.WriteString(", collateral_factor=")
	builder.WriteString(m.CollateralFactor)
	builder.WriteString(", exchange_rate=")
	builder.WriteString(m.ExchangeRate)
	builder.WriteString(", reserve_factor=")
	builder.WriteString(m.ReserveFactor)
	builder.WriteString(", reserves=")
	builder.WriteString(m.Reserves)
	builder.WriteString(", total_borrows=")
	builder.WriteString(m.TotalBorrows)
	builder.WriteString(", total_supply=")
	builder.WriteString(m.TotalSupply)
	builder.WriteString(", underlying_address=")
	builder.WriteString(m.UnderlyingAddress)
	builder.WriteString(", underlying_name=")
	builder.WriteString(m.UnderlyingName)
	builder.WriteString(", underlying_symbol=")
	builder.WriteString(m.UnderlyingSymbol)
	builder.WriteString(", underlying_price=")
	builder.WriteString(m.UnderlyingPrice)
	builder.WriteString(", underlying_decimals=")
	builder.WriteString(fmt.Sprintf("%v", m.UnderlyingDecimals))
	builder.WriteString(", underlying_price_usd=")
	builder.WriteString(m.UnderlyingPriceUsd)
	builder.WriteString(", block_number=")
	builder.WriteString(fmt.Sprintf("%v", m.BlockNumber))
	builder.WriteString(", block_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", m.BlockTimestamp))
	builder.WriteByte(')')
	return builder.String()
}

// Markets is a parsable slice of Market.
type Markets []*Market

func (m Markets) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
