// Code generated by entc, DO NOT EDIT.

package ent

import (
	"compound/internal/data/ent/account"
	"compound/internal/data/ent/accountctoken"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountCTokenCreate is the builder for creating a AccountCToken entity.
type AccountCTokenCreate struct {
	config
	mutation *AccountCTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (acc *AccountCTokenCreate) SetCreateTime(t time.Time) *AccountCTokenCreate {
	acc.mutation.SetCreateTime(t)
	return acc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableCreateTime(t *time.Time) *AccountCTokenCreate {
	if t != nil {
		acc.SetCreateTime(*t)
	}
	return acc
}

// SetUpdateTime sets the "update_time" field.
func (acc *AccountCTokenCreate) SetUpdateTime(t time.Time) *AccountCTokenCreate {
	acc.mutation.SetUpdateTime(t)
	return acc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableUpdateTime(t *time.Time) *AccountCTokenCreate {
	if t != nil {
		acc.SetUpdateTime(*t)
	}
	return acc
}

// SetUser sets the "user" field.
func (acc *AccountCTokenCreate) SetUser(s string) *AccountCTokenCreate {
	acc.mutation.SetUser(s)
	return acc
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableUser(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetUser(*s)
	}
	return acc
}

// SetAddress sets the "address" field.
func (acc *AccountCTokenCreate) SetAddress(s string) *AccountCTokenCreate {
	acc.mutation.SetAddress(s)
	return acc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableAddress(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetAddress(*s)
	}
	return acc
}

// SetSymbol sets the "symbol" field.
func (acc *AccountCTokenCreate) SetSymbol(s string) *AccountCTokenCreate {
	acc.mutation.SetSymbol(s)
	return acc
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableSymbol(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetSymbol(*s)
	}
	return acc
}

// SetName sets the "name" field.
func (acc *AccountCTokenCreate) SetName(s string) *AccountCTokenCreate {
	acc.mutation.SetName(s)
	return acc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableName(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetName(*s)
	}
	return acc
}

// SetEnteredMarket sets the "entered_market" field.
func (acc *AccountCTokenCreate) SetEnteredMarket(b bool) *AccountCTokenCreate {
	acc.mutation.SetEnteredMarket(b)
	return acc
}

// SetNillableEnteredMarket sets the "entered_market" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableEnteredMarket(b *bool) *AccountCTokenCreate {
	if b != nil {
		acc.SetEnteredMarket(*b)
	}
	return acc
}

// SetCtokenBalance sets the "ctoken_balance" field.
func (acc *AccountCTokenCreate) SetCtokenBalance(s string) *AccountCTokenCreate {
	acc.mutation.SetCtokenBalance(s)
	return acc
}

// SetNillableCtokenBalance sets the "ctoken_balance" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableCtokenBalance(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetCtokenBalance(*s)
	}
	return acc
}

// SetStoredBorrowBalance sets the "stored_borrow_balance" field.
func (acc *AccountCTokenCreate) SetStoredBorrowBalance(s string) *AccountCTokenCreate {
	acc.mutation.SetStoredBorrowBalance(s)
	return acc
}

// SetNillableStoredBorrowBalance sets the "stored_borrow_balance" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableStoredBorrowBalance(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetStoredBorrowBalance(*s)
	}
	return acc
}

// SetBorrowIndex sets the "borrow_index" field.
func (acc *AccountCTokenCreate) SetBorrowIndex(s string) *AccountCTokenCreate {
	acc.mutation.SetBorrowIndex(s)
	return acc
}

// SetNillableBorrowIndex sets the "borrow_index" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableBorrowIndex(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetBorrowIndex(*s)
	}
	return acc
}

// SetTotalUnderlyingSupplied sets the "total_underlying_supplied" field.
func (acc *AccountCTokenCreate) SetTotalUnderlyingSupplied(s string) *AccountCTokenCreate {
	acc.mutation.SetTotalUnderlyingSupplied(s)
	return acc
}

// SetNillableTotalUnderlyingSupplied sets the "total_underlying_supplied" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableTotalUnderlyingSupplied(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetTotalUnderlyingSupplied(*s)
	}
	return acc
}

// SetTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field.
func (acc *AccountCTokenCreate) SetTotalUnderlyingRedeemed(s string) *AccountCTokenCreate {
	acc.mutation.SetTotalUnderlyingRedeemed(s)
	return acc
}

// SetNillableTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableTotalUnderlyingRedeemed(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetTotalUnderlyingRedeemed(*s)
	}
	return acc
}

// SetTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field.
func (acc *AccountCTokenCreate) SetTotalUnderlyingBorrowed(s string) *AccountCTokenCreate {
	acc.mutation.SetTotalUnderlyingBorrowed(s)
	return acc
}

// SetNillableTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableTotalUnderlyingBorrowed(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetTotalUnderlyingBorrowed(*s)
	}
	return acc
}

// SetTotalUnderlyingRepaid sets the "total_underlying_repaid" field.
func (acc *AccountCTokenCreate) SetTotalUnderlyingRepaid(s string) *AccountCTokenCreate {
	acc.mutation.SetTotalUnderlyingRepaid(s)
	return acc
}

// SetNillableTotalUnderlyingRepaid sets the "total_underlying_repaid" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableTotalUnderlyingRepaid(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetTotalUnderlyingRepaid(*s)
	}
	return acc
}

// SetSupplyBalanceUnderlying sets the "supply_balance_underlying" field.
func (acc *AccountCTokenCreate) SetSupplyBalanceUnderlying(s string) *AccountCTokenCreate {
	acc.mutation.SetSupplyBalanceUnderlying(s)
	return acc
}

// SetNillableSupplyBalanceUnderlying sets the "supply_balance_underlying" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableSupplyBalanceUnderlying(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetSupplyBalanceUnderlying(*s)
	}
	return acc
}

// SetBorrowBalanceUnderlying sets the "borrow_balance_underlying" field.
func (acc *AccountCTokenCreate) SetBorrowBalanceUnderlying(s string) *AccountCTokenCreate {
	acc.mutation.SetBorrowBalanceUnderlying(s)
	return acc
}

// SetNillableBorrowBalanceUnderlying sets the "borrow_balance_underlying" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableBorrowBalanceUnderlying(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetBorrowBalanceUnderlying(*s)
	}
	return acc
}

// SetLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field.
func (acc *AccountCTokenCreate) SetLifetimeSupplyInterestAccrued(s string) *AccountCTokenCreate {
	acc.mutation.SetLifetimeSupplyInterestAccrued(s)
	return acc
}

// SetNillableLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableLifetimeSupplyInterestAccrued(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetLifetimeSupplyInterestAccrued(*s)
	}
	return acc
}

// SetLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field.
func (acc *AccountCTokenCreate) SetLifetimeBorrowInterestAccrued(s string) *AccountCTokenCreate {
	acc.mutation.SetLifetimeBorrowInterestAccrued(s)
	return acc
}

// SetNillableLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableLifetimeBorrowInterestAccrued(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetLifetimeBorrowInterestAccrued(*s)
	}
	return acc
}

// SetSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field.
func (acc *AccountCTokenCreate) SetSafeWithdrawAmountUnderlying(s string) *AccountCTokenCreate {
	acc.mutation.SetSafeWithdrawAmountUnderlying(s)
	return acc
}

// SetNillableSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableSafeWithdrawAmountUnderlying(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetSafeWithdrawAmountUnderlying(*s)
	}
	return acc
}

// SetCollateralValueInUsd sets the "collateral_value_in_usd" field.
func (acc *AccountCTokenCreate) SetCollateralValueInUsd(s string) *AccountCTokenCreate {
	acc.mutation.SetCollateralValueInUsd(s)
	return acc
}

// SetNillableCollateralValueInUsd sets the "collateral_value_in_usd" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableCollateralValueInUsd(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetCollateralValueInUsd(*s)
	}
	return acc
}

// SetBorrowValueInUsd sets the "borrow_value_in_usd" field.
func (acc *AccountCTokenCreate) SetBorrowValueInUsd(s string) *AccountCTokenCreate {
	acc.mutation.SetBorrowValueInUsd(s)
	return acc
}

// SetNillableBorrowValueInUsd sets the "borrow_value_in_usd" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableBorrowValueInUsd(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetBorrowValueInUsd(*s)
	}
	return acc
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (acc *AccountCTokenCreate) SetUnderlyingPriceUsd(s string) *AccountCTokenCreate {
	acc.mutation.SetUnderlyingPriceUsd(s)
	return acc
}

// SetNillableUnderlyingPriceUsd sets the "underlying_price_usd" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableUnderlyingPriceUsd(s *string) *AccountCTokenCreate {
	if s != nil {
		acc.SetUnderlyingPriceUsd(*s)
	}
	return acc
}

// SetBlockNumber sets the "block_number" field.
func (acc *AccountCTokenCreate) SetBlockNumber(u uint64) *AccountCTokenCreate {
	acc.mutation.SetBlockNumber(u)
	return acc
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableBlockNumber(u *uint64) *AccountCTokenCreate {
	if u != nil {
		acc.SetBlockNumber(*u)
	}
	return acc
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (acc *AccountCTokenCreate) SetAccountID(id int) *AccountCTokenCreate {
	acc.mutation.SetAccountID(id)
	return acc
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (acc *AccountCTokenCreate) SetNillableAccountID(id *int) *AccountCTokenCreate {
	if id != nil {
		acc = acc.SetAccountID(*id)
	}
	return acc
}

// SetAccount sets the "account" edge to the Account entity.
func (acc *AccountCTokenCreate) SetAccount(a *Account) *AccountCTokenCreate {
	return acc.SetAccountID(a.ID)
}

// Mutation returns the AccountCTokenMutation object of the builder.
func (acc *AccountCTokenCreate) Mutation() *AccountCTokenMutation {
	return acc.mutation
}

// Save creates the AccountCToken in the database.
func (acc *AccountCTokenCreate) Save(ctx context.Context) (*AccountCToken, error) {
	var (
		err  error
		node *AccountCToken
	)
	acc.defaults()
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountCTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			if node, err = acc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			if acc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AccountCTokenCreate) SaveX(ctx context.Context) *AccountCToken {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AccountCTokenCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AccountCTokenCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AccountCTokenCreate) defaults() {
	if _, ok := acc.mutation.CreateTime(); !ok {
		v := accountctoken.DefaultCreateTime()
		acc.mutation.SetCreateTime(v)
	}
	if _, ok := acc.mutation.UpdateTime(); !ok {
		v := accountctoken.DefaultUpdateTime()
		acc.mutation.SetUpdateTime(v)
	}
	if _, ok := acc.mutation.User(); !ok {
		v := accountctoken.DefaultUser
		acc.mutation.SetUser(v)
	}
	if _, ok := acc.mutation.Address(); !ok {
		v := accountctoken.DefaultAddress
		acc.mutation.SetAddress(v)
	}
	if _, ok := acc.mutation.Symbol(); !ok {
		v := accountctoken.DefaultSymbol
		acc.mutation.SetSymbol(v)
	}
	if _, ok := acc.mutation.Name(); !ok {
		v := accountctoken.DefaultName
		acc.mutation.SetName(v)
	}
	if _, ok := acc.mutation.EnteredMarket(); !ok {
		v := accountctoken.DefaultEnteredMarket
		acc.mutation.SetEnteredMarket(v)
	}
	if _, ok := acc.mutation.CtokenBalance(); !ok {
		v := accountctoken.DefaultCtokenBalance
		acc.mutation.SetCtokenBalance(v)
	}
	if _, ok := acc.mutation.StoredBorrowBalance(); !ok {
		v := accountctoken.DefaultStoredBorrowBalance
		acc.mutation.SetStoredBorrowBalance(v)
	}
	if _, ok := acc.mutation.BorrowIndex(); !ok {
		v := accountctoken.DefaultBorrowIndex
		acc.mutation.SetBorrowIndex(v)
	}
	if _, ok := acc.mutation.TotalUnderlyingSupplied(); !ok {
		v := accountctoken.DefaultTotalUnderlyingSupplied
		acc.mutation.SetTotalUnderlyingSupplied(v)
	}
	if _, ok := acc.mutation.TotalUnderlyingRedeemed(); !ok {
		v := accountctoken.DefaultTotalUnderlyingRedeemed
		acc.mutation.SetTotalUnderlyingRedeemed(v)
	}
	if _, ok := acc.mutation.TotalUnderlyingBorrowed(); !ok {
		v := accountctoken.DefaultTotalUnderlyingBorrowed
		acc.mutation.SetTotalUnderlyingBorrowed(v)
	}
	if _, ok := acc.mutation.TotalUnderlyingRepaid(); !ok {
		v := accountctoken.DefaultTotalUnderlyingRepaid
		acc.mutation.SetTotalUnderlyingRepaid(v)
	}
	if _, ok := acc.mutation.SupplyBalanceUnderlying(); !ok {
		v := accountctoken.DefaultSupplyBalanceUnderlying
		acc.mutation.SetSupplyBalanceUnderlying(v)
	}
	if _, ok := acc.mutation.BorrowBalanceUnderlying(); !ok {
		v := accountctoken.DefaultBorrowBalanceUnderlying
		acc.mutation.SetBorrowBalanceUnderlying(v)
	}
	if _, ok := acc.mutation.LifetimeSupplyInterestAccrued(); !ok {
		v := accountctoken.DefaultLifetimeSupplyInterestAccrued
		acc.mutation.SetLifetimeSupplyInterestAccrued(v)
	}
	if _, ok := acc.mutation.LifetimeBorrowInterestAccrued(); !ok {
		v := accountctoken.DefaultLifetimeBorrowInterestAccrued
		acc.mutation.SetLifetimeBorrowInterestAccrued(v)
	}
	if _, ok := acc.mutation.SafeWithdrawAmountUnderlying(); !ok {
		v := accountctoken.DefaultSafeWithdrawAmountUnderlying
		acc.mutation.SetSafeWithdrawAmountUnderlying(v)
	}
	if _, ok := acc.mutation.CollateralValueInUsd(); !ok {
		v := accountctoken.DefaultCollateralValueInUsd
		acc.mutation.SetCollateralValueInUsd(v)
	}
	if _, ok := acc.mutation.BorrowValueInUsd(); !ok {
		v := accountctoken.DefaultBorrowValueInUsd
		acc.mutation.SetBorrowValueInUsd(v)
	}
	if _, ok := acc.mutation.UnderlyingPriceUsd(); !ok {
		v := accountctoken.DefaultUnderlyingPriceUsd
		acc.mutation.SetUnderlyingPriceUsd(v)
	}
	if _, ok := acc.mutation.BlockNumber(); !ok {
		v := accountctoken.DefaultBlockNumber
		acc.mutation.SetBlockNumber(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AccountCTokenCreate) check() error {
	if _, ok := acc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "AccountCToken.create_time"`)}
	}
	if _, ok := acc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "AccountCToken.update_time"`)}
	}
	if _, ok := acc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required field "AccountCToken.user"`)}
	}
	if _, ok := acc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "AccountCToken.address"`)}
	}
	if _, ok := acc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "AccountCToken.symbol"`)}
	}
	if _, ok := acc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AccountCToken.name"`)}
	}
	if _, ok := acc.mutation.EnteredMarket(); !ok {
		return &ValidationError{Name: "entered_market", err: errors.New(`ent: missing required field "AccountCToken.entered_market"`)}
	}
	if _, ok := acc.mutation.CtokenBalance(); !ok {
		return &ValidationError{Name: "ctoken_balance", err: errors.New(`ent: missing required field "AccountCToken.ctoken_balance"`)}
	}
	if _, ok := acc.mutation.StoredBorrowBalance(); !ok {
		return &ValidationError{Name: "stored_borrow_balance", err: errors.New(`ent: missing required field "AccountCToken.stored_borrow_balance"`)}
	}
	if _, ok := acc.mutation.BorrowIndex(); !ok {
		return &ValidationError{Name: "borrow_index", err: errors.New(`ent: missing required field "AccountCToken.borrow_index"`)}
	}
	if _, ok := acc.mutation.TotalUnderlyingSupplied(); !ok {
		return &ValidationError{Name: "total_underlying_supplied", err: errors.New(`ent: missing required field "AccountCToken.total_underlying_supplied"`)}
	}
	if _, ok := acc.mutation.TotalUnderlyingRedeemed(); !ok {
		return &ValidationError{Name: "total_underlying_redeemed", err: errors.New(`ent: missing required field "AccountCToken.total_underlying_redeemed"`)}
	}
	if _, ok := acc.mutation.TotalUnderlyingBorrowed(); !ok {
		return &ValidationError{Name: "total_underlying_borrowed", err: errors.New(`ent: missing required field "AccountCToken.total_underlying_borrowed"`)}
	}
	if _, ok := acc.mutation.TotalUnderlyingRepaid(); !ok {
		return &ValidationError{Name: "total_underlying_repaid", err: errors.New(`ent: missing required field "AccountCToken.total_underlying_repaid"`)}
	}
	if _, ok := acc.mutation.SupplyBalanceUnderlying(); !ok {
		return &ValidationError{Name: "supply_balance_underlying", err: errors.New(`ent: missing required field "AccountCToken.supply_balance_underlying"`)}
	}
	if _, ok := acc.mutation.BorrowBalanceUnderlying(); !ok {
		return &ValidationError{Name: "borrow_balance_underlying", err: errors.New(`ent: missing required field "AccountCToken.borrow_balance_underlying"`)}
	}
	if _, ok := acc.mutation.LifetimeSupplyInterestAccrued(); !ok {
		return &ValidationError{Name: "lifetime_supply_interest_accrued", err: errors.New(`ent: missing required field "AccountCToken.lifetime_supply_interest_accrued"`)}
	}
	if _, ok := acc.mutation.LifetimeBorrowInterestAccrued(); !ok {
		return &ValidationError{Name: "lifetime_borrow_interest_accrued", err: errors.New(`ent: missing required field "AccountCToken.lifetime_borrow_interest_accrued"`)}
	}
	if _, ok := acc.mutation.SafeWithdrawAmountUnderlying(); !ok {
		return &ValidationError{Name: "safe_withdraw_amount_underlying", err: errors.New(`ent: missing required field "AccountCToken.safe_withdraw_amount_underlying"`)}
	}
	if _, ok := acc.mutation.CollateralValueInUsd(); !ok {
		return &ValidationError{Name: "collateral_value_in_usd", err: errors.New(`ent: missing required field "AccountCToken.collateral_value_in_usd"`)}
	}
	if _, ok := acc.mutation.BorrowValueInUsd(); !ok {
		return &ValidationError{Name: "borrow_value_in_usd", err: errors.New(`ent: missing required field "AccountCToken.borrow_value_in_usd"`)}
	}
	if _, ok := acc.mutation.UnderlyingPriceUsd(); !ok {
		return &ValidationError{Name: "underlying_price_usd", err: errors.New(`ent: missing required field "AccountCToken.underlying_price_usd"`)}
	}
	if _, ok := acc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "AccountCToken.block_number"`)}
	}
	return nil
}

func (acc *AccountCTokenCreate) sqlSave(ctx context.Context) (*AccountCToken, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (acc *AccountCTokenCreate) createSpec() (*AccountCToken, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountCToken{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: accountctoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountctoken.FieldID,
			},
		}
	)
	_spec.OnConflict = acc.conflict
	if value, ok := acc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountctoken.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := acc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountctoken.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := acc.mutation.User(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldUser,
		})
		_node.User = value
	}
	if value, ok := acc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := acc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := acc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldName,
		})
		_node.Name = value
	}
	if value, ok := acc.mutation.EnteredMarket(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: accountctoken.FieldEnteredMarket,
		})
		_node.EnteredMarket = value
	}
	if value, ok := acc.mutation.CtokenBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldCtokenBalance,
		})
		_node.CtokenBalance = value
	}
	if value, ok := acc.mutation.StoredBorrowBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldStoredBorrowBalance,
		})
		_node.StoredBorrowBalance = value
	}
	if value, ok := acc.mutation.BorrowIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldBorrowIndex,
		})
		_node.BorrowIndex = value
	}
	if value, ok := acc.mutation.TotalUnderlyingSupplied(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingSupplied,
		})
		_node.TotalUnderlyingSupplied = value
	}
	if value, ok := acc.mutation.TotalUnderlyingRedeemed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingRedeemed,
		})
		_node.TotalUnderlyingRedeemed = value
	}
	if value, ok := acc.mutation.TotalUnderlyingBorrowed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingBorrowed,
		})
		_node.TotalUnderlyingBorrowed = value
	}
	if value, ok := acc.mutation.TotalUnderlyingRepaid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingRepaid,
		})
		_node.TotalUnderlyingRepaid = value
	}
	if value, ok := acc.mutation.SupplyBalanceUnderlying(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldSupplyBalanceUnderlying,
		})
		_node.SupplyBalanceUnderlying = value
	}
	if value, ok := acc.mutation.BorrowBalanceUnderlying(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldBorrowBalanceUnderlying,
		})
		_node.BorrowBalanceUnderlying = value
	}
	if value, ok := acc.mutation.LifetimeSupplyInterestAccrued(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldLifetimeSupplyInterestAccrued,
		})
		_node.LifetimeSupplyInterestAccrued = value
	}
	if value, ok := acc.mutation.LifetimeBorrowInterestAccrued(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldLifetimeBorrowInterestAccrued,
		})
		_node.LifetimeBorrowInterestAccrued = value
	}
	if value, ok := acc.mutation.SafeWithdrawAmountUnderlying(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldSafeWithdrawAmountUnderlying,
		})
		_node.SafeWithdrawAmountUnderlying = value
	}
	if value, ok := acc.mutation.CollateralValueInUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldCollateralValueInUsd,
		})
		_node.CollateralValueInUsd = value
	}
	if value, ok := acc.mutation.BorrowValueInUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldBorrowValueInUsd,
		})
		_node.BorrowValueInUsd = value
	}
	if value, ok := acc.mutation.UnderlyingPriceUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldUnderlyingPriceUsd,
		})
		_node.UnderlyingPriceUsd = value
	}
	if value, ok := acc.mutation.BlockNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: accountctoken.FieldBlockNumber,
		})
		_node.BlockNumber = value
	}
	if nodes := acc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountctoken.AccountTable,
			Columns: []string{accountctoken.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_tokens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountCToken.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountCTokenUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (acc *AccountCTokenCreate) OnConflict(opts ...sql.ConflictOption) *AccountCTokenUpsertOne {
	acc.conflict = opts
	return &AccountCTokenUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountCToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acc *AccountCTokenCreate) OnConflictColumns(columns ...string) *AccountCTokenUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &AccountCTokenUpsertOne{
		create: acc,
	}
}

type (
	// AccountCTokenUpsertOne is the builder for "upsert"-ing
	//  one AccountCToken node.
	AccountCTokenUpsertOne struct {
		create *AccountCTokenCreate
	}

	// AccountCTokenUpsert is the "OnConflict" setter.
	AccountCTokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *AccountCTokenUpsert) SetCreateTime(v time.Time) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateCreateTime() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AccountCTokenUpsert) SetUpdateTime(v time.Time) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateUpdateTime() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldUpdateTime)
	return u
}

// SetUser sets the "user" field.
func (u *AccountCTokenUpsert) SetUser(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldUser, v)
	return u
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateUser() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldUser)
	return u
}

// SetAddress sets the "address" field.
func (u *AccountCTokenUpsert) SetAddress(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateAddress() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldAddress)
	return u
}

// SetSymbol sets the "symbol" field.
func (u *AccountCTokenUpsert) SetSymbol(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateSymbol() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldSymbol)
	return u
}

// SetName sets the "name" field.
func (u *AccountCTokenUpsert) SetName(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateName() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldName)
	return u
}

// SetEnteredMarket sets the "entered_market" field.
func (u *AccountCTokenUpsert) SetEnteredMarket(v bool) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldEnteredMarket, v)
	return u
}

// UpdateEnteredMarket sets the "entered_market" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateEnteredMarket() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldEnteredMarket)
	return u
}

// SetCtokenBalance sets the "ctoken_balance" field.
func (u *AccountCTokenUpsert) SetCtokenBalance(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldCtokenBalance, v)
	return u
}

// UpdateCtokenBalance sets the "ctoken_balance" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateCtokenBalance() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldCtokenBalance)
	return u
}

// SetStoredBorrowBalance sets the "stored_borrow_balance" field.
func (u *AccountCTokenUpsert) SetStoredBorrowBalance(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldStoredBorrowBalance, v)
	return u
}

// UpdateStoredBorrowBalance sets the "stored_borrow_balance" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateStoredBorrowBalance() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldStoredBorrowBalance)
	return u
}

// SetBorrowIndex sets the "borrow_index" field.
func (u *AccountCTokenUpsert) SetBorrowIndex(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldBorrowIndex, v)
	return u
}

// UpdateBorrowIndex sets the "borrow_index" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateBorrowIndex() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldBorrowIndex)
	return u
}

// SetTotalUnderlyingSupplied sets the "total_underlying_supplied" field.
func (u *AccountCTokenUpsert) SetTotalUnderlyingSupplied(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldTotalUnderlyingSupplied, v)
	return u
}

// UpdateTotalUnderlyingSupplied sets the "total_underlying_supplied" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateTotalUnderlyingSupplied() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldTotalUnderlyingSupplied)
	return u
}

// SetTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field.
func (u *AccountCTokenUpsert) SetTotalUnderlyingRedeemed(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldTotalUnderlyingRedeemed, v)
	return u
}

// UpdateTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateTotalUnderlyingRedeemed() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldTotalUnderlyingRedeemed)
	return u
}

// SetTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field.
func (u *AccountCTokenUpsert) SetTotalUnderlyingBorrowed(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldTotalUnderlyingBorrowed, v)
	return u
}

// UpdateTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateTotalUnderlyingBorrowed() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldTotalUnderlyingBorrowed)
	return u
}

// SetTotalUnderlyingRepaid sets the "total_underlying_repaid" field.
func (u *AccountCTokenUpsert) SetTotalUnderlyingRepaid(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldTotalUnderlyingRepaid, v)
	return u
}

// UpdateTotalUnderlyingRepaid sets the "total_underlying_repaid" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateTotalUnderlyingRepaid() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldTotalUnderlyingRepaid)
	return u
}

// SetSupplyBalanceUnderlying sets the "supply_balance_underlying" field.
func (u *AccountCTokenUpsert) SetSupplyBalanceUnderlying(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldSupplyBalanceUnderlying, v)
	return u
}

// UpdateSupplyBalanceUnderlying sets the "supply_balance_underlying" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateSupplyBalanceUnderlying() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldSupplyBalanceUnderlying)
	return u
}

// SetBorrowBalanceUnderlying sets the "borrow_balance_underlying" field.
func (u *AccountCTokenUpsert) SetBorrowBalanceUnderlying(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldBorrowBalanceUnderlying, v)
	return u
}

// UpdateBorrowBalanceUnderlying sets the "borrow_balance_underlying" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateBorrowBalanceUnderlying() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldBorrowBalanceUnderlying)
	return u
}

// SetLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field.
func (u *AccountCTokenUpsert) SetLifetimeSupplyInterestAccrued(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldLifetimeSupplyInterestAccrued, v)
	return u
}

// UpdateLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateLifetimeSupplyInterestAccrued() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldLifetimeSupplyInterestAccrued)
	return u
}

// SetLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field.
func (u *AccountCTokenUpsert) SetLifetimeBorrowInterestAccrued(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldLifetimeBorrowInterestAccrued, v)
	return u
}

// UpdateLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateLifetimeBorrowInterestAccrued() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldLifetimeBorrowInterestAccrued)
	return u
}

// SetSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field.
func (u *AccountCTokenUpsert) SetSafeWithdrawAmountUnderlying(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldSafeWithdrawAmountUnderlying, v)
	return u
}

// UpdateSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateSafeWithdrawAmountUnderlying() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldSafeWithdrawAmountUnderlying)
	return u
}

// SetCollateralValueInUsd sets the "collateral_value_in_usd" field.
func (u *AccountCTokenUpsert) SetCollateralValueInUsd(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldCollateralValueInUsd, v)
	return u
}

// UpdateCollateralValueInUsd sets the "collateral_value_in_usd" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateCollateralValueInUsd() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldCollateralValueInUsd)
	return u
}

// SetBorrowValueInUsd sets the "borrow_value_in_usd" field.
func (u *AccountCTokenUpsert) SetBorrowValueInUsd(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldBorrowValueInUsd, v)
	return u
}

// UpdateBorrowValueInUsd sets the "borrow_value_in_usd" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateBorrowValueInUsd() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldBorrowValueInUsd)
	return u
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (u *AccountCTokenUpsert) SetUnderlyingPriceUsd(v string) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldUnderlyingPriceUsd, v)
	return u
}

// UpdateUnderlyingPriceUsd sets the "underlying_price_usd" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateUnderlyingPriceUsd() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldUnderlyingPriceUsd)
	return u
}

// SetBlockNumber sets the "block_number" field.
func (u *AccountCTokenUpsert) SetBlockNumber(v uint64) *AccountCTokenUpsert {
	u.Set(accountctoken.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *AccountCTokenUpsert) UpdateBlockNumber() *AccountCTokenUpsert {
	u.SetExcluded(accountctoken.FieldBlockNumber)
	return u
}

// AddBlockNumber adds v to the "block_number" field.
func (u *AccountCTokenUpsert) AddBlockNumber(v uint64) *AccountCTokenUpsert {
	u.Add(accountctoken.FieldBlockNumber, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AccountCToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AccountCTokenUpsertOne) UpdateNewValues() *AccountCTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(accountctoken.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AccountCToken.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AccountCTokenUpsertOne) Ignore() *AccountCTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountCTokenUpsertOne) DoNothing() *AccountCTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCTokenCreate.OnConflict
// documentation for more info.
func (u *AccountCTokenUpsertOne) Update(set func(*AccountCTokenUpsert)) *AccountCTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountCTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AccountCTokenUpsertOne) SetCreateTime(v time.Time) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateCreateTime() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AccountCTokenUpsertOne) SetUpdateTime(v time.Time) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateUpdateTime() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUser sets the "user" field.
func (u *AccountCTokenUpsertOne) SetUser(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateUser() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateUser()
	})
}

// SetAddress sets the "address" field.
func (u *AccountCTokenUpsertOne) SetAddress(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateAddress() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateAddress()
	})
}

// SetSymbol sets the "symbol" field.
func (u *AccountCTokenUpsertOne) SetSymbol(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateSymbol() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateSymbol()
	})
}

// SetName sets the "name" field.
func (u *AccountCTokenUpsertOne) SetName(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateName() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateName()
	})
}

// SetEnteredMarket sets the "entered_market" field.
func (u *AccountCTokenUpsertOne) SetEnteredMarket(v bool) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetEnteredMarket(v)
	})
}

// UpdateEnteredMarket sets the "entered_market" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateEnteredMarket() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateEnteredMarket()
	})
}

// SetCtokenBalance sets the "ctoken_balance" field.
func (u *AccountCTokenUpsertOne) SetCtokenBalance(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetCtokenBalance(v)
	})
}

// UpdateCtokenBalance sets the "ctoken_balance" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateCtokenBalance() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateCtokenBalance()
	})
}

// SetStoredBorrowBalance sets the "stored_borrow_balance" field.
func (u *AccountCTokenUpsertOne) SetStoredBorrowBalance(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetStoredBorrowBalance(v)
	})
}

// UpdateStoredBorrowBalance sets the "stored_borrow_balance" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateStoredBorrowBalance() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateStoredBorrowBalance()
	})
}

// SetBorrowIndex sets the "borrow_index" field.
func (u *AccountCTokenUpsertOne) SetBorrowIndex(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetBorrowIndex(v)
	})
}

// UpdateBorrowIndex sets the "borrow_index" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateBorrowIndex() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateBorrowIndex()
	})
}

// SetTotalUnderlyingSupplied sets the "total_underlying_supplied" field.
func (u *AccountCTokenUpsertOne) SetTotalUnderlyingSupplied(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetTotalUnderlyingSupplied(v)
	})
}

// UpdateTotalUnderlyingSupplied sets the "total_underlying_supplied" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateTotalUnderlyingSupplied() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateTotalUnderlyingSupplied()
	})
}

// SetTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field.
func (u *AccountCTokenUpsertOne) SetTotalUnderlyingRedeemed(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetTotalUnderlyingRedeemed(v)
	})
}

// UpdateTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateTotalUnderlyingRedeemed() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateTotalUnderlyingRedeemed()
	})
}

// SetTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field.
func (u *AccountCTokenUpsertOne) SetTotalUnderlyingBorrowed(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetTotalUnderlyingBorrowed(v)
	})
}

// UpdateTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateTotalUnderlyingBorrowed() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateTotalUnderlyingBorrowed()
	})
}

// SetTotalUnderlyingRepaid sets the "total_underlying_repaid" field.
func (u *AccountCTokenUpsertOne) SetTotalUnderlyingRepaid(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetTotalUnderlyingRepaid(v)
	})
}

// UpdateTotalUnderlyingRepaid sets the "total_underlying_repaid" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateTotalUnderlyingRepaid() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateTotalUnderlyingRepaid()
	})
}

// SetSupplyBalanceUnderlying sets the "supply_balance_underlying" field.
func (u *AccountCTokenUpsertOne) SetSupplyBalanceUnderlying(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetSupplyBalanceUnderlying(v)
	})
}

// UpdateSupplyBalanceUnderlying sets the "supply_balance_underlying" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateSupplyBalanceUnderlying() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateSupplyBalanceUnderlying()
	})
}

// SetBorrowBalanceUnderlying sets the "borrow_balance_underlying" field.
func (u *AccountCTokenUpsertOne) SetBorrowBalanceUnderlying(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetBorrowBalanceUnderlying(v)
	})
}

// UpdateBorrowBalanceUnderlying sets the "borrow_balance_underlying" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateBorrowBalanceUnderlying() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateBorrowBalanceUnderlying()
	})
}

// SetLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field.
func (u *AccountCTokenUpsertOne) SetLifetimeSupplyInterestAccrued(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetLifetimeSupplyInterestAccrued(v)
	})
}

// UpdateLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateLifetimeSupplyInterestAccrued() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateLifetimeSupplyInterestAccrued()
	})
}

// SetLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field.
func (u *AccountCTokenUpsertOne) SetLifetimeBorrowInterestAccrued(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetLifetimeBorrowInterestAccrued(v)
	})
}

// UpdateLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateLifetimeBorrowInterestAccrued() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateLifetimeBorrowInterestAccrued()
	})
}

// SetSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field.
func (u *AccountCTokenUpsertOne) SetSafeWithdrawAmountUnderlying(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetSafeWithdrawAmountUnderlying(v)
	})
}

// UpdateSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateSafeWithdrawAmountUnderlying() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateSafeWithdrawAmountUnderlying()
	})
}

// SetCollateralValueInUsd sets the "collateral_value_in_usd" field.
func (u *AccountCTokenUpsertOne) SetCollateralValueInUsd(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetCollateralValueInUsd(v)
	})
}

// UpdateCollateralValueInUsd sets the "collateral_value_in_usd" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateCollateralValueInUsd() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateCollateralValueInUsd()
	})
}

// SetBorrowValueInUsd sets the "borrow_value_in_usd" field.
func (u *AccountCTokenUpsertOne) SetBorrowValueInUsd(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetBorrowValueInUsd(v)
	})
}

// UpdateBorrowValueInUsd sets the "borrow_value_in_usd" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateBorrowValueInUsd() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateBorrowValueInUsd()
	})
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (u *AccountCTokenUpsertOne) SetUnderlyingPriceUsd(v string) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetUnderlyingPriceUsd(v)
	})
}

// UpdateUnderlyingPriceUsd sets the "underlying_price_usd" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateUnderlyingPriceUsd() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateUnderlyingPriceUsd()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *AccountCTokenUpsertOne) SetBlockNumber(v uint64) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *AccountCTokenUpsertOne) AddBlockNumber(v uint64) *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *AccountCTokenUpsertOne) UpdateBlockNumber() *AccountCTokenUpsertOne {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateBlockNumber()
	})
}

// Exec executes the query.
func (u *AccountCTokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountCTokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountCTokenUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountCTokenUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountCTokenCreateBulk is the builder for creating many AccountCToken entities in bulk.
type AccountCTokenCreateBulk struct {
	config
	builders []*AccountCTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the AccountCToken entities in the database.
func (accb *AccountCTokenCreateBulk) Save(ctx context.Context) ([]*AccountCToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AccountCToken, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountCTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AccountCTokenCreateBulk) SaveX(ctx context.Context) []*AccountCToken {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AccountCTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AccountCTokenCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountCToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountCTokenUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (accb *AccountCTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountCTokenUpsertBulk {
	accb.conflict = opts
	return &AccountCTokenUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountCToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (accb *AccountCTokenCreateBulk) OnConflictColumns(columns ...string) *AccountCTokenUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &AccountCTokenUpsertBulk{
		create: accb,
	}
}

// AccountCTokenUpsertBulk is the builder for "upsert"-ing
// a bulk of AccountCToken nodes.
type AccountCTokenUpsertBulk struct {
	create *AccountCTokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AccountCToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AccountCTokenUpsertBulk) UpdateNewValues() *AccountCTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(accountctoken.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccountCToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AccountCTokenUpsertBulk) Ignore() *AccountCTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountCTokenUpsertBulk) DoNothing() *AccountCTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCTokenCreateBulk.OnConflict
// documentation for more info.
func (u *AccountCTokenUpsertBulk) Update(set func(*AccountCTokenUpsert)) *AccountCTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountCTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *AccountCTokenUpsertBulk) SetCreateTime(v time.Time) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateCreateTime() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *AccountCTokenUpsertBulk) SetUpdateTime(v time.Time) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateUpdateTime() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUser sets the "user" field.
func (u *AccountCTokenUpsertBulk) SetUser(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateUser() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateUser()
	})
}

// SetAddress sets the "address" field.
func (u *AccountCTokenUpsertBulk) SetAddress(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateAddress() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateAddress()
	})
}

// SetSymbol sets the "symbol" field.
func (u *AccountCTokenUpsertBulk) SetSymbol(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateSymbol() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateSymbol()
	})
}

// SetName sets the "name" field.
func (u *AccountCTokenUpsertBulk) SetName(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateName() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateName()
	})
}

// SetEnteredMarket sets the "entered_market" field.
func (u *AccountCTokenUpsertBulk) SetEnteredMarket(v bool) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetEnteredMarket(v)
	})
}

// UpdateEnteredMarket sets the "entered_market" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateEnteredMarket() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateEnteredMarket()
	})
}

// SetCtokenBalance sets the "ctoken_balance" field.
func (u *AccountCTokenUpsertBulk) SetCtokenBalance(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetCtokenBalance(v)
	})
}

// UpdateCtokenBalance sets the "ctoken_balance" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateCtokenBalance() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateCtokenBalance()
	})
}

// SetStoredBorrowBalance sets the "stored_borrow_balance" field.
func (u *AccountCTokenUpsertBulk) SetStoredBorrowBalance(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetStoredBorrowBalance(v)
	})
}

// UpdateStoredBorrowBalance sets the "stored_borrow_balance" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateStoredBorrowBalance() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateStoredBorrowBalance()
	})
}

// SetBorrowIndex sets the "borrow_index" field.
func (u *AccountCTokenUpsertBulk) SetBorrowIndex(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetBorrowIndex(v)
	})
}

// UpdateBorrowIndex sets the "borrow_index" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateBorrowIndex() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateBorrowIndex()
	})
}

// SetTotalUnderlyingSupplied sets the "total_underlying_supplied" field.
func (u *AccountCTokenUpsertBulk) SetTotalUnderlyingSupplied(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetTotalUnderlyingSupplied(v)
	})
}

// UpdateTotalUnderlyingSupplied sets the "total_underlying_supplied" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateTotalUnderlyingSupplied() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateTotalUnderlyingSupplied()
	})
}

// SetTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field.
func (u *AccountCTokenUpsertBulk) SetTotalUnderlyingRedeemed(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetTotalUnderlyingRedeemed(v)
	})
}

// UpdateTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateTotalUnderlyingRedeemed() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateTotalUnderlyingRedeemed()
	})
}

// SetTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field.
func (u *AccountCTokenUpsertBulk) SetTotalUnderlyingBorrowed(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetTotalUnderlyingBorrowed(v)
	})
}

// UpdateTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateTotalUnderlyingBorrowed() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateTotalUnderlyingBorrowed()
	})
}

// SetTotalUnderlyingRepaid sets the "total_underlying_repaid" field.
func (u *AccountCTokenUpsertBulk) SetTotalUnderlyingRepaid(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetTotalUnderlyingRepaid(v)
	})
}

// UpdateTotalUnderlyingRepaid sets the "total_underlying_repaid" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateTotalUnderlyingRepaid() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateTotalUnderlyingRepaid()
	})
}

// SetSupplyBalanceUnderlying sets the "supply_balance_underlying" field.
func (u *AccountCTokenUpsertBulk) SetSupplyBalanceUnderlying(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetSupplyBalanceUnderlying(v)
	})
}

// UpdateSupplyBalanceUnderlying sets the "supply_balance_underlying" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateSupplyBalanceUnderlying() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateSupplyBalanceUnderlying()
	})
}

// SetBorrowBalanceUnderlying sets the "borrow_balance_underlying" field.
func (u *AccountCTokenUpsertBulk) SetBorrowBalanceUnderlying(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetBorrowBalanceUnderlying(v)
	})
}

// UpdateBorrowBalanceUnderlying sets the "borrow_balance_underlying" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateBorrowBalanceUnderlying() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateBorrowBalanceUnderlying()
	})
}

// SetLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field.
func (u *AccountCTokenUpsertBulk) SetLifetimeSupplyInterestAccrued(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetLifetimeSupplyInterestAccrued(v)
	})
}

// UpdateLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateLifetimeSupplyInterestAccrued() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateLifetimeSupplyInterestAccrued()
	})
}

// SetLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field.
func (u *AccountCTokenUpsertBulk) SetLifetimeBorrowInterestAccrued(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetLifetimeBorrowInterestAccrued(v)
	})
}

// UpdateLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateLifetimeBorrowInterestAccrued() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateLifetimeBorrowInterestAccrued()
	})
}

// SetSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field.
func (u *AccountCTokenUpsertBulk) SetSafeWithdrawAmountUnderlying(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetSafeWithdrawAmountUnderlying(v)
	})
}

// UpdateSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateSafeWithdrawAmountUnderlying() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateSafeWithdrawAmountUnderlying()
	})
}

// SetCollateralValueInUsd sets the "collateral_value_in_usd" field.
func (u *AccountCTokenUpsertBulk) SetCollateralValueInUsd(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetCollateralValueInUsd(v)
	})
}

// UpdateCollateralValueInUsd sets the "collateral_value_in_usd" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateCollateralValueInUsd() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateCollateralValueInUsd()
	})
}

// SetBorrowValueInUsd sets the "borrow_value_in_usd" field.
func (u *AccountCTokenUpsertBulk) SetBorrowValueInUsd(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetBorrowValueInUsd(v)
	})
}

// UpdateBorrowValueInUsd sets the "borrow_value_in_usd" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateBorrowValueInUsd() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateBorrowValueInUsd()
	})
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (u *AccountCTokenUpsertBulk) SetUnderlyingPriceUsd(v string) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetUnderlyingPriceUsd(v)
	})
}

// UpdateUnderlyingPriceUsd sets the "underlying_price_usd" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateUnderlyingPriceUsd() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateUnderlyingPriceUsd()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *AccountCTokenUpsertBulk) SetBlockNumber(v uint64) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *AccountCTokenUpsertBulk) AddBlockNumber(v uint64) *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *AccountCTokenUpsertBulk) UpdateBlockNumber() *AccountCTokenUpsertBulk {
	return u.Update(func(s *AccountCTokenUpsert) {
		s.UpdateBlockNumber()
	})
}

// Exec executes the query.
func (u *AccountCTokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccountCTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountCTokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
