// Code generated by entc, DO NOT EDIT.

package ent

import (
	"compound/internal/data/ent/account"
	"compound/internal/data/ent/accountctoken"
	"compound/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountCTokenUpdate is the builder for updating AccountCToken entities.
type AccountCTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AccountCTokenMutation
}

// Where appends a list predicates to the AccountCTokenUpdate builder.
func (acu *AccountCTokenUpdate) Where(ps ...predicate.AccountCToken) *AccountCTokenUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetUpdateTime sets the "update_time" field.
func (acu *AccountCTokenUpdate) SetUpdateTime(t time.Time) *AccountCTokenUpdate {
	acu.mutation.SetUpdateTime(t)
	return acu
}

// SetUser sets the "user" field.
func (acu *AccountCTokenUpdate) SetUser(s string) *AccountCTokenUpdate {
	acu.mutation.SetUser(s)
	return acu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableUser(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetUser(*s)
	}
	return acu
}

// SetAddress sets the "address" field.
func (acu *AccountCTokenUpdate) SetAddress(s string) *AccountCTokenUpdate {
	acu.mutation.SetAddress(s)
	return acu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableAddress(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetAddress(*s)
	}
	return acu
}

// SetSymbol sets the "symbol" field.
func (acu *AccountCTokenUpdate) SetSymbol(s string) *AccountCTokenUpdate {
	acu.mutation.SetSymbol(s)
	return acu
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableSymbol(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetSymbol(*s)
	}
	return acu
}

// SetName sets the "name" field.
func (acu *AccountCTokenUpdate) SetName(s string) *AccountCTokenUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableName(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// SetEnteredMarket sets the "entered_market" field.
func (acu *AccountCTokenUpdate) SetEnteredMarket(b bool) *AccountCTokenUpdate {
	acu.mutation.SetEnteredMarket(b)
	return acu
}

// SetNillableEnteredMarket sets the "entered_market" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableEnteredMarket(b *bool) *AccountCTokenUpdate {
	if b != nil {
		acu.SetEnteredMarket(*b)
	}
	return acu
}

// SetCtokenBalance sets the "ctoken_balance" field.
func (acu *AccountCTokenUpdate) SetCtokenBalance(s string) *AccountCTokenUpdate {
	acu.mutation.SetCtokenBalance(s)
	return acu
}

// SetNillableCtokenBalance sets the "ctoken_balance" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableCtokenBalance(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetCtokenBalance(*s)
	}
	return acu
}

// SetStoredBorrowBalance sets the "stored_borrow_balance" field.
func (acu *AccountCTokenUpdate) SetStoredBorrowBalance(s string) *AccountCTokenUpdate {
	acu.mutation.SetStoredBorrowBalance(s)
	return acu
}

// SetNillableStoredBorrowBalance sets the "stored_borrow_balance" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableStoredBorrowBalance(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetStoredBorrowBalance(*s)
	}
	return acu
}

// SetBorrowIndex sets the "borrow_index" field.
func (acu *AccountCTokenUpdate) SetBorrowIndex(s string) *AccountCTokenUpdate {
	acu.mutation.SetBorrowIndex(s)
	return acu
}

// SetNillableBorrowIndex sets the "borrow_index" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableBorrowIndex(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetBorrowIndex(*s)
	}
	return acu
}

// SetTotalUnderlyingSupplied sets the "total_underlying_supplied" field.
func (acu *AccountCTokenUpdate) SetTotalUnderlyingSupplied(s string) *AccountCTokenUpdate {
	acu.mutation.SetTotalUnderlyingSupplied(s)
	return acu
}

// SetNillableTotalUnderlyingSupplied sets the "total_underlying_supplied" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableTotalUnderlyingSupplied(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetTotalUnderlyingSupplied(*s)
	}
	return acu
}

// SetTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field.
func (acu *AccountCTokenUpdate) SetTotalUnderlyingRedeemed(s string) *AccountCTokenUpdate {
	acu.mutation.SetTotalUnderlyingRedeemed(s)
	return acu
}

// SetNillableTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableTotalUnderlyingRedeemed(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetTotalUnderlyingRedeemed(*s)
	}
	return acu
}

// SetTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field.
func (acu *AccountCTokenUpdate) SetTotalUnderlyingBorrowed(s string) *AccountCTokenUpdate {
	acu.mutation.SetTotalUnderlyingBorrowed(s)
	return acu
}

// SetNillableTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableTotalUnderlyingBorrowed(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetTotalUnderlyingBorrowed(*s)
	}
	return acu
}

// SetTotalUnderlyingRepaid sets the "total_underlying_repaid" field.
func (acu *AccountCTokenUpdate) SetTotalUnderlyingRepaid(s string) *AccountCTokenUpdate {
	acu.mutation.SetTotalUnderlyingRepaid(s)
	return acu
}

// SetNillableTotalUnderlyingRepaid sets the "total_underlying_repaid" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableTotalUnderlyingRepaid(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetTotalUnderlyingRepaid(*s)
	}
	return acu
}

// SetSupplyBalanceUnderlying sets the "supply_balance_underlying" field.
func (acu *AccountCTokenUpdate) SetSupplyBalanceUnderlying(s string) *AccountCTokenUpdate {
	acu.mutation.SetSupplyBalanceUnderlying(s)
	return acu
}

// SetNillableSupplyBalanceUnderlying sets the "supply_balance_underlying" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableSupplyBalanceUnderlying(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetSupplyBalanceUnderlying(*s)
	}
	return acu
}

// SetBorrowBalanceUnderlying sets the "borrow_balance_underlying" field.
func (acu *AccountCTokenUpdate) SetBorrowBalanceUnderlying(s string) *AccountCTokenUpdate {
	acu.mutation.SetBorrowBalanceUnderlying(s)
	return acu
}

// SetNillableBorrowBalanceUnderlying sets the "borrow_balance_underlying" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableBorrowBalanceUnderlying(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetBorrowBalanceUnderlying(*s)
	}
	return acu
}

// SetLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field.
func (acu *AccountCTokenUpdate) SetLifetimeSupplyInterestAccrued(s string) *AccountCTokenUpdate {
	acu.mutation.SetLifetimeSupplyInterestAccrued(s)
	return acu
}

// SetNillableLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableLifetimeSupplyInterestAccrued(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetLifetimeSupplyInterestAccrued(*s)
	}
	return acu
}

// SetLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field.
func (acu *AccountCTokenUpdate) SetLifetimeBorrowInterestAccrued(s string) *AccountCTokenUpdate {
	acu.mutation.SetLifetimeBorrowInterestAccrued(s)
	return acu
}

// SetNillableLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableLifetimeBorrowInterestAccrued(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetLifetimeBorrowInterestAccrued(*s)
	}
	return acu
}

// SetSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field.
func (acu *AccountCTokenUpdate) SetSafeWithdrawAmountUnderlying(s string) *AccountCTokenUpdate {
	acu.mutation.SetSafeWithdrawAmountUnderlying(s)
	return acu
}

// SetNillableSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableSafeWithdrawAmountUnderlying(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetSafeWithdrawAmountUnderlying(*s)
	}
	return acu
}

// SetCollateralValueInUsd sets the "collateral_value_in_usd" field.
func (acu *AccountCTokenUpdate) SetCollateralValueInUsd(s string) *AccountCTokenUpdate {
	acu.mutation.SetCollateralValueInUsd(s)
	return acu
}

// SetNillableCollateralValueInUsd sets the "collateral_value_in_usd" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableCollateralValueInUsd(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetCollateralValueInUsd(*s)
	}
	return acu
}

// SetBorrowValueInUsd sets the "borrow_value_in_usd" field.
func (acu *AccountCTokenUpdate) SetBorrowValueInUsd(s string) *AccountCTokenUpdate {
	acu.mutation.SetBorrowValueInUsd(s)
	return acu
}

// SetNillableBorrowValueInUsd sets the "borrow_value_in_usd" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableBorrowValueInUsd(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetBorrowValueInUsd(*s)
	}
	return acu
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (acu *AccountCTokenUpdate) SetUnderlyingPriceUsd(s string) *AccountCTokenUpdate {
	acu.mutation.SetUnderlyingPriceUsd(s)
	return acu
}

// SetNillableUnderlyingPriceUsd sets the "underlying_price_usd" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableUnderlyingPriceUsd(s *string) *AccountCTokenUpdate {
	if s != nil {
		acu.SetUnderlyingPriceUsd(*s)
	}
	return acu
}

// SetBlockNumber sets the "block_number" field.
func (acu *AccountCTokenUpdate) SetBlockNumber(u uint64) *AccountCTokenUpdate {
	acu.mutation.ResetBlockNumber()
	acu.mutation.SetBlockNumber(u)
	return acu
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableBlockNumber(u *uint64) *AccountCTokenUpdate {
	if u != nil {
		acu.SetBlockNumber(*u)
	}
	return acu
}

// AddBlockNumber adds u to the "block_number" field.
func (acu *AccountCTokenUpdate) AddBlockNumber(u int64) *AccountCTokenUpdate {
	acu.mutation.AddBlockNumber(u)
	return acu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (acu *AccountCTokenUpdate) SetAccountID(id int) *AccountCTokenUpdate {
	acu.mutation.SetAccountID(id)
	return acu
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (acu *AccountCTokenUpdate) SetNillableAccountID(id *int) *AccountCTokenUpdate {
	if id != nil {
		acu = acu.SetAccountID(*id)
	}
	return acu
}

// SetAccount sets the "account" edge to the Account entity.
func (acu *AccountCTokenUpdate) SetAccount(a *Account) *AccountCTokenUpdate {
	return acu.SetAccountID(a.ID)
}

// Mutation returns the AccountCTokenMutation object of the builder.
func (acu *AccountCTokenUpdate) Mutation() *AccountCTokenMutation {
	return acu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (acu *AccountCTokenUpdate) ClearAccount() *AccountCTokenUpdate {
	acu.mutation.ClearAccount()
	return acu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AccountCTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	acu.defaults()
	if len(acu.hooks) == 0 {
		affected, err = acu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountCTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acu.mutation = mutation
			affected, err = acu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(acu.hooks) - 1; i >= 0; i-- {
			if acu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AccountCTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AccountCTokenUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AccountCTokenUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AccountCTokenUpdate) defaults() {
	if _, ok := acu.mutation.UpdateTime(); !ok {
		v := accountctoken.UpdateDefaultUpdateTime()
		acu.mutation.SetUpdateTime(v)
	}
}

func (acu *AccountCTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountctoken.Table,
			Columns: accountctoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountctoken.FieldID,
			},
		},
	}
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountctoken.FieldUpdateTime,
		})
	}
	if value, ok := acu.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldUser,
		})
	}
	if value, ok := acu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldAddress,
		})
	}
	if value, ok := acu.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldSymbol,
		})
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldName,
		})
	}
	if value, ok := acu.mutation.EnteredMarket(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: accountctoken.FieldEnteredMarket,
		})
	}
	if value, ok := acu.mutation.CtokenBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldCtokenBalance,
		})
	}
	if value, ok := acu.mutation.StoredBorrowBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldStoredBorrowBalance,
		})
	}
	if value, ok := acu.mutation.BorrowIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldBorrowIndex,
		})
	}
	if value, ok := acu.mutation.TotalUnderlyingSupplied(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingSupplied,
		})
	}
	if value, ok := acu.mutation.TotalUnderlyingRedeemed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingRedeemed,
		})
	}
	if value, ok := acu.mutation.TotalUnderlyingBorrowed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingBorrowed,
		})
	}
	if value, ok := acu.mutation.TotalUnderlyingRepaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingRepaid,
		})
	}
	if value, ok := acu.mutation.SupplyBalanceUnderlying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldSupplyBalanceUnderlying,
		})
	}
	if value, ok := acu.mutation.BorrowBalanceUnderlying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldBorrowBalanceUnderlying,
		})
	}
	if value, ok := acu.mutation.LifetimeSupplyInterestAccrued(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldLifetimeSupplyInterestAccrued,
		})
	}
	if value, ok := acu.mutation.LifetimeBorrowInterestAccrued(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldLifetimeBorrowInterestAccrued,
		})
	}
	if value, ok := acu.mutation.SafeWithdrawAmountUnderlying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldSafeWithdrawAmountUnderlying,
		})
	}
	if value, ok := acu.mutation.CollateralValueInUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldCollateralValueInUsd,
		})
	}
	if value, ok := acu.mutation.BorrowValueInUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldBorrowValueInUsd,
		})
	}
	if value, ok := acu.mutation.UnderlyingPriceUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldUnderlyingPriceUsd,
		})
	}
	if value, ok := acu.mutation.BlockNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: accountctoken.FieldBlockNumber,
		})
	}
	if value, ok := acu.mutation.AddedBlockNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: accountctoken.FieldBlockNumber,
		})
	}
	if acu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountctoken.AccountTable,
			Columns: []string{accountctoken.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountctoken.AccountTable,
			Columns: []string{accountctoken.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountctoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AccountCTokenUpdateOne is the builder for updating a single AccountCToken entity.
type AccountCTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountCTokenMutation
}

// SetUpdateTime sets the "update_time" field.
func (acuo *AccountCTokenUpdateOne) SetUpdateTime(t time.Time) *AccountCTokenUpdateOne {
	acuo.mutation.SetUpdateTime(t)
	return acuo
}

// SetUser sets the "user" field.
func (acuo *AccountCTokenUpdateOne) SetUser(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetUser(s)
	return acuo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableUser(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetUser(*s)
	}
	return acuo
}

// SetAddress sets the "address" field.
func (acuo *AccountCTokenUpdateOne) SetAddress(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetAddress(s)
	return acuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableAddress(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetAddress(*s)
	}
	return acuo
}

// SetSymbol sets the "symbol" field.
func (acuo *AccountCTokenUpdateOne) SetSymbol(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetSymbol(s)
	return acuo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableSymbol(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetSymbol(*s)
	}
	return acuo
}

// SetName sets the "name" field.
func (acuo *AccountCTokenUpdateOne) SetName(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableName(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// SetEnteredMarket sets the "entered_market" field.
func (acuo *AccountCTokenUpdateOne) SetEnteredMarket(b bool) *AccountCTokenUpdateOne {
	acuo.mutation.SetEnteredMarket(b)
	return acuo
}

// SetNillableEnteredMarket sets the "entered_market" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableEnteredMarket(b *bool) *AccountCTokenUpdateOne {
	if b != nil {
		acuo.SetEnteredMarket(*b)
	}
	return acuo
}

// SetCtokenBalance sets the "ctoken_balance" field.
func (acuo *AccountCTokenUpdateOne) SetCtokenBalance(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetCtokenBalance(s)
	return acuo
}

// SetNillableCtokenBalance sets the "ctoken_balance" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableCtokenBalance(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetCtokenBalance(*s)
	}
	return acuo
}

// SetStoredBorrowBalance sets the "stored_borrow_balance" field.
func (acuo *AccountCTokenUpdateOne) SetStoredBorrowBalance(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetStoredBorrowBalance(s)
	return acuo
}

// SetNillableStoredBorrowBalance sets the "stored_borrow_balance" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableStoredBorrowBalance(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetStoredBorrowBalance(*s)
	}
	return acuo
}

// SetBorrowIndex sets the "borrow_index" field.
func (acuo *AccountCTokenUpdateOne) SetBorrowIndex(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetBorrowIndex(s)
	return acuo
}

// SetNillableBorrowIndex sets the "borrow_index" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableBorrowIndex(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetBorrowIndex(*s)
	}
	return acuo
}

// SetTotalUnderlyingSupplied sets the "total_underlying_supplied" field.
func (acuo *AccountCTokenUpdateOne) SetTotalUnderlyingSupplied(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetTotalUnderlyingSupplied(s)
	return acuo
}

// SetNillableTotalUnderlyingSupplied sets the "total_underlying_supplied" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableTotalUnderlyingSupplied(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetTotalUnderlyingSupplied(*s)
	}
	return acuo
}

// SetTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field.
func (acuo *AccountCTokenUpdateOne) SetTotalUnderlyingRedeemed(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetTotalUnderlyingRedeemed(s)
	return acuo
}

// SetNillableTotalUnderlyingRedeemed sets the "total_underlying_redeemed" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableTotalUnderlyingRedeemed(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetTotalUnderlyingRedeemed(*s)
	}
	return acuo
}

// SetTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field.
func (acuo *AccountCTokenUpdateOne) SetTotalUnderlyingBorrowed(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetTotalUnderlyingBorrowed(s)
	return acuo
}

// SetNillableTotalUnderlyingBorrowed sets the "total_underlying_borrowed" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableTotalUnderlyingBorrowed(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetTotalUnderlyingBorrowed(*s)
	}
	return acuo
}

// SetTotalUnderlyingRepaid sets the "total_underlying_repaid" field.
func (acuo *AccountCTokenUpdateOne) SetTotalUnderlyingRepaid(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetTotalUnderlyingRepaid(s)
	return acuo
}

// SetNillableTotalUnderlyingRepaid sets the "total_underlying_repaid" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableTotalUnderlyingRepaid(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetTotalUnderlyingRepaid(*s)
	}
	return acuo
}

// SetSupplyBalanceUnderlying sets the "supply_balance_underlying" field.
func (acuo *AccountCTokenUpdateOne) SetSupplyBalanceUnderlying(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetSupplyBalanceUnderlying(s)
	return acuo
}

// SetNillableSupplyBalanceUnderlying sets the "supply_balance_underlying" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableSupplyBalanceUnderlying(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetSupplyBalanceUnderlying(*s)
	}
	return acuo
}

// SetBorrowBalanceUnderlying sets the "borrow_balance_underlying" field.
func (acuo *AccountCTokenUpdateOne) SetBorrowBalanceUnderlying(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetBorrowBalanceUnderlying(s)
	return acuo
}

// SetNillableBorrowBalanceUnderlying sets the "borrow_balance_underlying" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableBorrowBalanceUnderlying(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetBorrowBalanceUnderlying(*s)
	}
	return acuo
}

// SetLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field.
func (acuo *AccountCTokenUpdateOne) SetLifetimeSupplyInterestAccrued(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetLifetimeSupplyInterestAccrued(s)
	return acuo
}

// SetNillableLifetimeSupplyInterestAccrued sets the "lifetime_supply_interest_accrued" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableLifetimeSupplyInterestAccrued(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetLifetimeSupplyInterestAccrued(*s)
	}
	return acuo
}

// SetLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field.
func (acuo *AccountCTokenUpdateOne) SetLifetimeBorrowInterestAccrued(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetLifetimeBorrowInterestAccrued(s)
	return acuo
}

// SetNillableLifetimeBorrowInterestAccrued sets the "lifetime_borrow_interest_accrued" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableLifetimeBorrowInterestAccrued(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetLifetimeBorrowInterestAccrued(*s)
	}
	return acuo
}

// SetSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field.
func (acuo *AccountCTokenUpdateOne) SetSafeWithdrawAmountUnderlying(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetSafeWithdrawAmountUnderlying(s)
	return acuo
}

// SetNillableSafeWithdrawAmountUnderlying sets the "safe_withdraw_amount_underlying" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableSafeWithdrawAmountUnderlying(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetSafeWithdrawAmountUnderlying(*s)
	}
	return acuo
}

// SetCollateralValueInUsd sets the "collateral_value_in_usd" field.
func (acuo *AccountCTokenUpdateOne) SetCollateralValueInUsd(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetCollateralValueInUsd(s)
	return acuo
}

// SetNillableCollateralValueInUsd sets the "collateral_value_in_usd" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableCollateralValueInUsd(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetCollateralValueInUsd(*s)
	}
	return acuo
}

// SetBorrowValueInUsd sets the "borrow_value_in_usd" field.
func (acuo *AccountCTokenUpdateOne) SetBorrowValueInUsd(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetBorrowValueInUsd(s)
	return acuo
}

// SetNillableBorrowValueInUsd sets the "borrow_value_in_usd" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableBorrowValueInUsd(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetBorrowValueInUsd(*s)
	}
	return acuo
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (acuo *AccountCTokenUpdateOne) SetUnderlyingPriceUsd(s string) *AccountCTokenUpdateOne {
	acuo.mutation.SetUnderlyingPriceUsd(s)
	return acuo
}

// SetNillableUnderlyingPriceUsd sets the "underlying_price_usd" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableUnderlyingPriceUsd(s *string) *AccountCTokenUpdateOne {
	if s != nil {
		acuo.SetUnderlyingPriceUsd(*s)
	}
	return acuo
}

// SetBlockNumber sets the "block_number" field.
func (acuo *AccountCTokenUpdateOne) SetBlockNumber(u uint64) *AccountCTokenUpdateOne {
	acuo.mutation.ResetBlockNumber()
	acuo.mutation.SetBlockNumber(u)
	return acuo
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableBlockNumber(u *uint64) *AccountCTokenUpdateOne {
	if u != nil {
		acuo.SetBlockNumber(*u)
	}
	return acuo
}

// AddBlockNumber adds u to the "block_number" field.
func (acuo *AccountCTokenUpdateOne) AddBlockNumber(u int64) *AccountCTokenUpdateOne {
	acuo.mutation.AddBlockNumber(u)
	return acuo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (acuo *AccountCTokenUpdateOne) SetAccountID(id int) *AccountCTokenUpdateOne {
	acuo.mutation.SetAccountID(id)
	return acuo
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (acuo *AccountCTokenUpdateOne) SetNillableAccountID(id *int) *AccountCTokenUpdateOne {
	if id != nil {
		acuo = acuo.SetAccountID(*id)
	}
	return acuo
}

// SetAccount sets the "account" edge to the Account entity.
func (acuo *AccountCTokenUpdateOne) SetAccount(a *Account) *AccountCTokenUpdateOne {
	return acuo.SetAccountID(a.ID)
}

// Mutation returns the AccountCTokenMutation object of the builder.
func (acuo *AccountCTokenUpdateOne) Mutation() *AccountCTokenMutation {
	return acuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (acuo *AccountCTokenUpdateOne) ClearAccount() *AccountCTokenUpdateOne {
	acuo.mutation.ClearAccount()
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AccountCTokenUpdateOne) Select(field string, fields ...string) *AccountCTokenUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AccountCToken entity.
func (acuo *AccountCTokenUpdateOne) Save(ctx context.Context) (*AccountCToken, error) {
	var (
		err  error
		node *AccountCToken
	)
	acuo.defaults()
	if len(acuo.hooks) == 0 {
		node, err = acuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountCTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acuo.mutation = mutation
			node, err = acuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acuo.hooks) - 1; i >= 0; i-- {
			if acuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AccountCTokenUpdateOne) SaveX(ctx context.Context) *AccountCToken {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AccountCTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AccountCTokenUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AccountCTokenUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdateTime(); !ok {
		v := accountctoken.UpdateDefaultUpdateTime()
		acuo.mutation.SetUpdateTime(v)
	}
}

func (acuo *AccountCTokenUpdateOne) sqlSave(ctx context.Context) (_node *AccountCToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountctoken.Table,
			Columns: accountctoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountctoken.FieldID,
			},
		},
	}
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountCToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountctoken.FieldID)
		for _, f := range fields {
			if !accountctoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountctoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountctoken.FieldUpdateTime,
		})
	}
	if value, ok := acuo.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldUser,
		})
	}
	if value, ok := acuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldAddress,
		})
	}
	if value, ok := acuo.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldSymbol,
		})
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldName,
		})
	}
	if value, ok := acuo.mutation.EnteredMarket(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: accountctoken.FieldEnteredMarket,
		})
	}
	if value, ok := acuo.mutation.CtokenBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldCtokenBalance,
		})
	}
	if value, ok := acuo.mutation.StoredBorrowBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldStoredBorrowBalance,
		})
	}
	if value, ok := acuo.mutation.BorrowIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldBorrowIndex,
		})
	}
	if value, ok := acuo.mutation.TotalUnderlyingSupplied(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingSupplied,
		})
	}
	if value, ok := acuo.mutation.TotalUnderlyingRedeemed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingRedeemed,
		})
	}
	if value, ok := acuo.mutation.TotalUnderlyingBorrowed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingBorrowed,
		})
	}
	if value, ok := acuo.mutation.TotalUnderlyingRepaid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldTotalUnderlyingRepaid,
		})
	}
	if value, ok := acuo.mutation.SupplyBalanceUnderlying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldSupplyBalanceUnderlying,
		})
	}
	if value, ok := acuo.mutation.BorrowBalanceUnderlying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldBorrowBalanceUnderlying,
		})
	}
	if value, ok := acuo.mutation.LifetimeSupplyInterestAccrued(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldLifetimeSupplyInterestAccrued,
		})
	}
	if value, ok := acuo.mutation.LifetimeBorrowInterestAccrued(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldLifetimeBorrowInterestAccrued,
		})
	}
	if value, ok := acuo.mutation.SafeWithdrawAmountUnderlying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldSafeWithdrawAmountUnderlying,
		})
	}
	if value, ok := acuo.mutation.CollateralValueInUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldCollateralValueInUsd,
		})
	}
	if value, ok := acuo.mutation.BorrowValueInUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldBorrowValueInUsd,
		})
	}
	if value, ok := acuo.mutation.UnderlyingPriceUsd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountctoken.FieldUnderlyingPriceUsd,
		})
	}
	if value, ok := acuo.mutation.BlockNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: accountctoken.FieldBlockNumber,
		})
	}
	if value, ok := acuo.mutation.AddedBlockNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: accountctoken.FieldBlockNumber,
		})
	}
	if acuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountctoken.AccountTable,
			Columns: []string{accountctoken.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountctoken.AccountTable,
			Columns: []string{accountctoken.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountCToken{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountctoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
