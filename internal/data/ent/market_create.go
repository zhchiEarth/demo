// Code generated by entc, DO NOT EDIT.

package ent

import (
	"compound/internal/data/ent/market"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MarketCreate is the builder for creating a Market entity.
type MarketCreate struct {
	config
	mutation *MarketMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (mc *MarketCreate) SetCreateTime(t time.Time) *MarketCreate {
	mc.mutation.SetCreateTime(t)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *MarketCreate) SetNillableCreateTime(t *time.Time) *MarketCreate {
	if t != nil {
		mc.SetCreateTime(*t)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *MarketCreate) SetUpdateTime(t time.Time) *MarketCreate {
	mc.mutation.SetUpdateTime(t)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *MarketCreate) SetNillableUpdateTime(t *time.Time) *MarketCreate {
	if t != nil {
		mc.SetUpdateTime(*t)
	}
	return mc
}

// SetAddress sets the "address" field.
func (mc *MarketCreate) SetAddress(s string) *MarketCreate {
	mc.mutation.SetAddress(s)
	return mc
}

// SetSymbol sets the "symbol" field.
func (mc *MarketCreate) SetSymbol(s string) *MarketCreate {
	mc.mutation.SetSymbol(s)
	return mc
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (mc *MarketCreate) SetNillableSymbol(s *string) *MarketCreate {
	if s != nil {
		mc.SetSymbol(*s)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MarketCreate) SetName(s string) *MarketCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mc *MarketCreate) SetNillableName(s *string) *MarketCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// SetBorrowIndex sets the "borrow_index" field.
func (mc *MarketCreate) SetBorrowIndex(s string) *MarketCreate {
	mc.mutation.SetBorrowIndex(s)
	return mc
}

// SetNillableBorrowIndex sets the "borrow_index" field if the given value is not nil.
func (mc *MarketCreate) SetNillableBorrowIndex(s *string) *MarketCreate {
	if s != nil {
		mc.SetBorrowIndex(*s)
	}
	return mc
}

// SetBorrowRate sets the "borrow_rate" field.
func (mc *MarketCreate) SetBorrowRate(s string) *MarketCreate {
	mc.mutation.SetBorrowRate(s)
	return mc
}

// SetNillableBorrowRate sets the "borrow_rate" field if the given value is not nil.
func (mc *MarketCreate) SetNillableBorrowRate(s *string) *MarketCreate {
	if s != nil {
		mc.SetBorrowRate(*s)
	}
	return mc
}

// SetSupplyRate sets the "supply_rate" field.
func (mc *MarketCreate) SetSupplyRate(s string) *MarketCreate {
	mc.mutation.SetSupplyRate(s)
	return mc
}

// SetNillableSupplyRate sets the "supply_rate" field if the given value is not nil.
func (mc *MarketCreate) SetNillableSupplyRate(s *string) *MarketCreate {
	if s != nil {
		mc.SetSupplyRate(*s)
	}
	return mc
}

// SetCash sets the "cash" field.
func (mc *MarketCreate) SetCash(s string) *MarketCreate {
	mc.mutation.SetCash(s)
	return mc
}

// SetNillableCash sets the "cash" field if the given value is not nil.
func (mc *MarketCreate) SetNillableCash(s *string) *MarketCreate {
	if s != nil {
		mc.SetCash(*s)
	}
	return mc
}

// SetCollateralFactor sets the "collateral_factor" field.
func (mc *MarketCreate) SetCollateralFactor(s string) *MarketCreate {
	mc.mutation.SetCollateralFactor(s)
	return mc
}

// SetNillableCollateralFactor sets the "collateral_factor" field if the given value is not nil.
func (mc *MarketCreate) SetNillableCollateralFactor(s *string) *MarketCreate {
	if s != nil {
		mc.SetCollateralFactor(*s)
	}
	return mc
}

// SetExchangeRate sets the "exchange_rate" field.
func (mc *MarketCreate) SetExchangeRate(s string) *MarketCreate {
	mc.mutation.SetExchangeRate(s)
	return mc
}

// SetNillableExchangeRate sets the "exchange_rate" field if the given value is not nil.
func (mc *MarketCreate) SetNillableExchangeRate(s *string) *MarketCreate {
	if s != nil {
		mc.SetExchangeRate(*s)
	}
	return mc
}

// SetReserveFactor sets the "reserve_factor" field.
func (mc *MarketCreate) SetReserveFactor(s string) *MarketCreate {
	mc.mutation.SetReserveFactor(s)
	return mc
}

// SetNillableReserveFactor sets the "reserve_factor" field if the given value is not nil.
func (mc *MarketCreate) SetNillableReserveFactor(s *string) *MarketCreate {
	if s != nil {
		mc.SetReserveFactor(*s)
	}
	return mc
}

// SetReserves sets the "reserves" field.
func (mc *MarketCreate) SetReserves(s string) *MarketCreate {
	mc.mutation.SetReserves(s)
	return mc
}

// SetNillableReserves sets the "reserves" field if the given value is not nil.
func (mc *MarketCreate) SetNillableReserves(s *string) *MarketCreate {
	if s != nil {
		mc.SetReserves(*s)
	}
	return mc
}

// SetTotalBorrows sets the "total_borrows" field.
func (mc *MarketCreate) SetTotalBorrows(s string) *MarketCreate {
	mc.mutation.SetTotalBorrows(s)
	return mc
}

// SetNillableTotalBorrows sets the "total_borrows" field if the given value is not nil.
func (mc *MarketCreate) SetNillableTotalBorrows(s *string) *MarketCreate {
	if s != nil {
		mc.SetTotalBorrows(*s)
	}
	return mc
}

// SetTotalSupply sets the "total_supply" field.
func (mc *MarketCreate) SetTotalSupply(s string) *MarketCreate {
	mc.mutation.SetTotalSupply(s)
	return mc
}

// SetNillableTotalSupply sets the "total_supply" field if the given value is not nil.
func (mc *MarketCreate) SetNillableTotalSupply(s *string) *MarketCreate {
	if s != nil {
		mc.SetTotalSupply(*s)
	}
	return mc
}

// SetUnderlyingAddress sets the "underlying_address" field.
func (mc *MarketCreate) SetUnderlyingAddress(s string) *MarketCreate {
	mc.mutation.SetUnderlyingAddress(s)
	return mc
}

// SetNillableUnderlyingAddress sets the "underlying_address" field if the given value is not nil.
func (mc *MarketCreate) SetNillableUnderlyingAddress(s *string) *MarketCreate {
	if s != nil {
		mc.SetUnderlyingAddress(*s)
	}
	return mc
}

// SetUnderlyingName sets the "underlying_name" field.
func (mc *MarketCreate) SetUnderlyingName(s string) *MarketCreate {
	mc.mutation.SetUnderlyingName(s)
	return mc
}

// SetNillableUnderlyingName sets the "underlying_name" field if the given value is not nil.
func (mc *MarketCreate) SetNillableUnderlyingName(s *string) *MarketCreate {
	if s != nil {
		mc.SetUnderlyingName(*s)
	}
	return mc
}

// SetUnderlyingSymbol sets the "underlying_symbol" field.
func (mc *MarketCreate) SetUnderlyingSymbol(s string) *MarketCreate {
	mc.mutation.SetUnderlyingSymbol(s)
	return mc
}

// SetNillableUnderlyingSymbol sets the "underlying_symbol" field if the given value is not nil.
func (mc *MarketCreate) SetNillableUnderlyingSymbol(s *string) *MarketCreate {
	if s != nil {
		mc.SetUnderlyingSymbol(*s)
	}
	return mc
}

// SetUnderlyingPrice sets the "underlying_price" field.
func (mc *MarketCreate) SetUnderlyingPrice(s string) *MarketCreate {
	mc.mutation.SetUnderlyingPrice(s)
	return mc
}

// SetNillableUnderlyingPrice sets the "underlying_price" field if the given value is not nil.
func (mc *MarketCreate) SetNillableUnderlyingPrice(s *string) *MarketCreate {
	if s != nil {
		mc.SetUnderlyingPrice(*s)
	}
	return mc
}

// SetUnderlyingDecimals sets the "underlying_decimals" field.
func (mc *MarketCreate) SetUnderlyingDecimals(u uint32) *MarketCreate {
	mc.mutation.SetUnderlyingDecimals(u)
	return mc
}

// SetNillableUnderlyingDecimals sets the "underlying_decimals" field if the given value is not nil.
func (mc *MarketCreate) SetNillableUnderlyingDecimals(u *uint32) *MarketCreate {
	if u != nil {
		mc.SetUnderlyingDecimals(*u)
	}
	return mc
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (mc *MarketCreate) SetUnderlyingPriceUsd(s string) *MarketCreate {
	mc.mutation.SetUnderlyingPriceUsd(s)
	return mc
}

// SetNillableUnderlyingPriceUsd sets the "underlying_price_usd" field if the given value is not nil.
func (mc *MarketCreate) SetNillableUnderlyingPriceUsd(s *string) *MarketCreate {
	if s != nil {
		mc.SetUnderlyingPriceUsd(*s)
	}
	return mc
}

// SetBlockNumber sets the "block_number" field.
func (mc *MarketCreate) SetBlockNumber(u uint64) *MarketCreate {
	mc.mutation.SetBlockNumber(u)
	return mc
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (mc *MarketCreate) SetNillableBlockNumber(u *uint64) *MarketCreate {
	if u != nil {
		mc.SetBlockNumber(*u)
	}
	return mc
}

// SetBlockTimestamp sets the "block_timestamp" field.
func (mc *MarketCreate) SetBlockTimestamp(u uint32) *MarketCreate {
	mc.mutation.SetBlockTimestamp(u)
	return mc
}

// SetNillableBlockTimestamp sets the "block_timestamp" field if the given value is not nil.
func (mc *MarketCreate) SetNillableBlockTimestamp(u *uint32) *MarketCreate {
	if u != nil {
		mc.SetBlockTimestamp(*u)
	}
	return mc
}

// Mutation returns the MarketMutation object of the builder.
func (mc *MarketCreate) Mutation() *MarketMutation {
	return mc.mutation
}

// Save creates the Market in the database.
func (mc *MarketCreate) Save(ctx context.Context) (*Market, error) {
	var (
		err  error
		node *Market
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MarketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MarketCreate) SaveX(ctx context.Context) *Market {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MarketCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MarketCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MarketCreate) defaults() {
	if _, ok := mc.mutation.CreateTime(); !ok {
		v := market.DefaultCreateTime()
		mc.mutation.SetCreateTime(v)
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		v := market.DefaultUpdateTime()
		mc.mutation.SetUpdateTime(v)
	}
	if _, ok := mc.mutation.Symbol(); !ok {
		v := market.DefaultSymbol
		mc.mutation.SetSymbol(v)
	}
	if _, ok := mc.mutation.Name(); !ok {
		v := market.DefaultName
		mc.mutation.SetName(v)
	}
	if _, ok := mc.mutation.BorrowIndex(); !ok {
		v := market.DefaultBorrowIndex
		mc.mutation.SetBorrowIndex(v)
	}
	if _, ok := mc.mutation.BorrowRate(); !ok {
		v := market.DefaultBorrowRate
		mc.mutation.SetBorrowRate(v)
	}
	if _, ok := mc.mutation.SupplyRate(); !ok {
		v := market.DefaultSupplyRate
		mc.mutation.SetSupplyRate(v)
	}
	if _, ok := mc.mutation.Cash(); !ok {
		v := market.DefaultCash
		mc.mutation.SetCash(v)
	}
	if _, ok := mc.mutation.CollateralFactor(); !ok {
		v := market.DefaultCollateralFactor
		mc.mutation.SetCollateralFactor(v)
	}
	if _, ok := mc.mutation.ExchangeRate(); !ok {
		v := market.DefaultExchangeRate
		mc.mutation.SetExchangeRate(v)
	}
	if _, ok := mc.mutation.ReserveFactor(); !ok {
		v := market.DefaultReserveFactor
		mc.mutation.SetReserveFactor(v)
	}
	if _, ok := mc.mutation.Reserves(); !ok {
		v := market.DefaultReserves
		mc.mutation.SetReserves(v)
	}
	if _, ok := mc.mutation.TotalBorrows(); !ok {
		v := market.DefaultTotalBorrows
		mc.mutation.SetTotalBorrows(v)
	}
	if _, ok := mc.mutation.TotalSupply(); !ok {
		v := market.DefaultTotalSupply
		mc.mutation.SetTotalSupply(v)
	}
	if _, ok := mc.mutation.UnderlyingAddress(); !ok {
		v := market.DefaultUnderlyingAddress
		mc.mutation.SetUnderlyingAddress(v)
	}
	if _, ok := mc.mutation.UnderlyingName(); !ok {
		v := market.DefaultUnderlyingName
		mc.mutation.SetUnderlyingName(v)
	}
	if _, ok := mc.mutation.UnderlyingSymbol(); !ok {
		v := market.DefaultUnderlyingSymbol
		mc.mutation.SetUnderlyingSymbol(v)
	}
	if _, ok := mc.mutation.UnderlyingPrice(); !ok {
		v := market.DefaultUnderlyingPrice
		mc.mutation.SetUnderlyingPrice(v)
	}
	if _, ok := mc.mutation.UnderlyingDecimals(); !ok {
		v := market.DefaultUnderlyingDecimals
		mc.mutation.SetUnderlyingDecimals(v)
	}
	if _, ok := mc.mutation.UnderlyingPriceUsd(); !ok {
		v := market.DefaultUnderlyingPriceUsd
		mc.mutation.SetUnderlyingPriceUsd(v)
	}
	if _, ok := mc.mutation.BlockNumber(); !ok {
		v := market.DefaultBlockNumber
		mc.mutation.SetBlockNumber(v)
	}
	if _, ok := mc.mutation.BlockTimestamp(); !ok {
		v := market.DefaultBlockTimestamp
		mc.mutation.SetBlockTimestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MarketCreate) check() error {
	if _, ok := mc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Market.create_time"`)}
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Market.update_time"`)}
	}
	if _, ok := mc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Market.address"`)}
	}
	if _, ok := mc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Market.symbol"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Market.name"`)}
	}
	if _, ok := mc.mutation.BorrowIndex(); !ok {
		return &ValidationError{Name: "borrow_index", err: errors.New(`ent: missing required field "Market.borrow_index"`)}
	}
	if _, ok := mc.mutation.BorrowRate(); !ok {
		return &ValidationError{Name: "borrow_rate", err: errors.New(`ent: missing required field "Market.borrow_rate"`)}
	}
	if _, ok := mc.mutation.SupplyRate(); !ok {
		return &ValidationError{Name: "supply_rate", err: errors.New(`ent: missing required field "Market.supply_rate"`)}
	}
	if _, ok := mc.mutation.Cash(); !ok {
		return &ValidationError{Name: "cash", err: errors.New(`ent: missing required field "Market.cash"`)}
	}
	if _, ok := mc.mutation.CollateralFactor(); !ok {
		return &ValidationError{Name: "collateral_factor", err: errors.New(`ent: missing required field "Market.collateral_factor"`)}
	}
	if _, ok := mc.mutation.ExchangeRate(); !ok {
		return &ValidationError{Name: "exchange_rate", err: errors.New(`ent: missing required field "Market.exchange_rate"`)}
	}
	if _, ok := mc.mutation.ReserveFactor(); !ok {
		return &ValidationError{Name: "reserve_factor", err: errors.New(`ent: missing required field "Market.reserve_factor"`)}
	}
	if _, ok := mc.mutation.Reserves(); !ok {
		return &ValidationError{Name: "reserves", err: errors.New(`ent: missing required field "Market.reserves"`)}
	}
	if _, ok := mc.mutation.TotalBorrows(); !ok {
		return &ValidationError{Name: "total_borrows", err: errors.New(`ent: missing required field "Market.total_borrows"`)}
	}
	if _, ok := mc.mutation.TotalSupply(); !ok {
		return &ValidationError{Name: "total_supply", err: errors.New(`ent: missing required field "Market.total_supply"`)}
	}
	if _, ok := mc.mutation.UnderlyingAddress(); !ok {
		return &ValidationError{Name: "underlying_address", err: errors.New(`ent: missing required field "Market.underlying_address"`)}
	}
	if _, ok := mc.mutation.UnderlyingName(); !ok {
		return &ValidationError{Name: "underlying_name", err: errors.New(`ent: missing required field "Market.underlying_name"`)}
	}
	if _, ok := mc.mutation.UnderlyingSymbol(); !ok {
		return &ValidationError{Name: "underlying_symbol", err: errors.New(`ent: missing required field "Market.underlying_symbol"`)}
	}
	if _, ok := mc.mutation.UnderlyingPrice(); !ok {
		return &ValidationError{Name: "underlying_price", err: errors.New(`ent: missing required field "Market.underlying_price"`)}
	}
	if _, ok := mc.mutation.UnderlyingDecimals(); !ok {
		return &ValidationError{Name: "underlying_decimals", err: errors.New(`ent: missing required field "Market.underlying_decimals"`)}
	}
	if _, ok := mc.mutation.UnderlyingPriceUsd(); !ok {
		return &ValidationError{Name: "underlying_price_usd", err: errors.New(`ent: missing required field "Market.underlying_price_usd"`)}
	}
	if _, ok := mc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "Market.block_number"`)}
	}
	if _, ok := mc.mutation.BlockTimestamp(); !ok {
		return &ValidationError{Name: "block_timestamp", err: errors.New(`ent: missing required field "Market.block_timestamp"`)}
	}
	return nil
}

func (mc *MarketCreate) sqlSave(ctx context.Context) (*Market, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MarketCreate) createSpec() (*Market, *sqlgraph.CreateSpec) {
	var (
		_node = &Market{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: market.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: market.FieldID,
			},
		}
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: market.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: market.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := mc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := mc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.BorrowIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldBorrowIndex,
		})
		_node.BorrowIndex = value
	}
	if value, ok := mc.mutation.BorrowRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldBorrowRate,
		})
		_node.BorrowRate = value
	}
	if value, ok := mc.mutation.SupplyRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldSupplyRate,
		})
		_node.SupplyRate = value
	}
	if value, ok := mc.mutation.Cash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldCash,
		})
		_node.Cash = value
	}
	if value, ok := mc.mutation.CollateralFactor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldCollateralFactor,
		})
		_node.CollateralFactor = value
	}
	if value, ok := mc.mutation.ExchangeRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldExchangeRate,
		})
		_node.ExchangeRate = value
	}
	if value, ok := mc.mutation.ReserveFactor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldReserveFactor,
		})
		_node.ReserveFactor = value
	}
	if value, ok := mc.mutation.Reserves(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldReserves,
		})
		_node.Reserves = value
	}
	if value, ok := mc.mutation.TotalBorrows(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldTotalBorrows,
		})
		_node.TotalBorrows = value
	}
	if value, ok := mc.mutation.TotalSupply(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldTotalSupply,
		})
		_node.TotalSupply = value
	}
	if value, ok := mc.mutation.UnderlyingAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingAddress,
		})
		_node.UnderlyingAddress = value
	}
	if value, ok := mc.mutation.UnderlyingName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingName,
		})
		_node.UnderlyingName = value
	}
	if value, ok := mc.mutation.UnderlyingSymbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingSymbol,
		})
		_node.UnderlyingSymbol = value
	}
	if value, ok := mc.mutation.UnderlyingPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingPrice,
		})
		_node.UnderlyingPrice = value
	}
	if value, ok := mc.mutation.UnderlyingDecimals(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldUnderlyingDecimals,
		})
		_node.UnderlyingDecimals = value
	}
	if value, ok := mc.mutation.UnderlyingPriceUsd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldUnderlyingPriceUsd,
		})
		_node.UnderlyingPriceUsd = value
	}
	if value, ok := mc.mutation.BlockNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: market.FieldBlockNumber,
		})
		_node.BlockNumber = value
	}
	if value, ok := mc.mutation.BlockTimestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: market.FieldBlockTimestamp,
		})
		_node.BlockTimestamp = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Market.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MarketUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (mc *MarketCreate) OnConflict(opts ...sql.ConflictOption) *MarketUpsertOne {
	mc.conflict = opts
	return &MarketUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mc *MarketCreate) OnConflictColumns(columns ...string) *MarketUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MarketUpsertOne{
		create: mc,
	}
}

type (
	// MarketUpsertOne is the builder for "upsert"-ing
	//  one Market node.
	MarketUpsertOne struct {
		create *MarketCreate
	}

	// MarketUpsert is the "OnConflict" setter.
	MarketUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *MarketUpsert) SetCreateTime(v time.Time) *MarketUpsert {
	u.Set(market.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *MarketUpsert) UpdateCreateTime() *MarketUpsert {
	u.SetExcluded(market.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MarketUpsert) SetUpdateTime(v time.Time) *MarketUpsert {
	u.Set(market.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MarketUpsert) UpdateUpdateTime() *MarketUpsert {
	u.SetExcluded(market.FieldUpdateTime)
	return u
}

// SetAddress sets the "address" field.
func (u *MarketUpsert) SetAddress(v string) *MarketUpsert {
	u.Set(market.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *MarketUpsert) UpdateAddress() *MarketUpsert {
	u.SetExcluded(market.FieldAddress)
	return u
}

// SetSymbol sets the "symbol" field.
func (u *MarketUpsert) SetSymbol(v string) *MarketUpsert {
	u.Set(market.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *MarketUpsert) UpdateSymbol() *MarketUpsert {
	u.SetExcluded(market.FieldSymbol)
	return u
}

// SetName sets the "name" field.
func (u *MarketUpsert) SetName(v string) *MarketUpsert {
	u.Set(market.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MarketUpsert) UpdateName() *MarketUpsert {
	u.SetExcluded(market.FieldName)
	return u
}

// SetBorrowIndex sets the "borrow_index" field.
func (u *MarketUpsert) SetBorrowIndex(v string) *MarketUpsert {
	u.Set(market.FieldBorrowIndex, v)
	return u
}

// UpdateBorrowIndex sets the "borrow_index" field to the value that was provided on create.
func (u *MarketUpsert) UpdateBorrowIndex() *MarketUpsert {
	u.SetExcluded(market.FieldBorrowIndex)
	return u
}

// SetBorrowRate sets the "borrow_rate" field.
func (u *MarketUpsert) SetBorrowRate(v string) *MarketUpsert {
	u.Set(market.FieldBorrowRate, v)
	return u
}

// UpdateBorrowRate sets the "borrow_rate" field to the value that was provided on create.
func (u *MarketUpsert) UpdateBorrowRate() *MarketUpsert {
	u.SetExcluded(market.FieldBorrowRate)
	return u
}

// SetSupplyRate sets the "supply_rate" field.
func (u *MarketUpsert) SetSupplyRate(v string) *MarketUpsert {
	u.Set(market.FieldSupplyRate, v)
	return u
}

// UpdateSupplyRate sets the "supply_rate" field to the value that was provided on create.
func (u *MarketUpsert) UpdateSupplyRate() *MarketUpsert {
	u.SetExcluded(market.FieldSupplyRate)
	return u
}

// SetCash sets the "cash" field.
func (u *MarketUpsert) SetCash(v string) *MarketUpsert {
	u.Set(market.FieldCash, v)
	return u
}

// UpdateCash sets the "cash" field to the value that was provided on create.
func (u *MarketUpsert) UpdateCash() *MarketUpsert {
	u.SetExcluded(market.FieldCash)
	return u
}

// SetCollateralFactor sets the "collateral_factor" field.
func (u *MarketUpsert) SetCollateralFactor(v string) *MarketUpsert {
	u.Set(market.FieldCollateralFactor, v)
	return u
}

// UpdateCollateralFactor sets the "collateral_factor" field to the value that was provided on create.
func (u *MarketUpsert) UpdateCollateralFactor() *MarketUpsert {
	u.SetExcluded(market.FieldCollateralFactor)
	return u
}

// SetExchangeRate sets the "exchange_rate" field.
func (u *MarketUpsert) SetExchangeRate(v string) *MarketUpsert {
	u.Set(market.FieldExchangeRate, v)
	return u
}

// UpdateExchangeRate sets the "exchange_rate" field to the value that was provided on create.
func (u *MarketUpsert) UpdateExchangeRate() *MarketUpsert {
	u.SetExcluded(market.FieldExchangeRate)
	return u
}

// SetReserveFactor sets the "reserve_factor" field.
func (u *MarketUpsert) SetReserveFactor(v string) *MarketUpsert {
	u.Set(market.FieldReserveFactor, v)
	return u
}

// UpdateReserveFactor sets the "reserve_factor" field to the value that was provided on create.
func (u *MarketUpsert) UpdateReserveFactor() *MarketUpsert {
	u.SetExcluded(market.FieldReserveFactor)
	return u
}

// SetReserves sets the "reserves" field.
func (u *MarketUpsert) SetReserves(v string) *MarketUpsert {
	u.Set(market.FieldReserves, v)
	return u
}

// UpdateReserves sets the "reserves" field to the value that was provided on create.
func (u *MarketUpsert) UpdateReserves() *MarketUpsert {
	u.SetExcluded(market.FieldReserves)
	return u
}

// SetTotalBorrows sets the "total_borrows" field.
func (u *MarketUpsert) SetTotalBorrows(v string) *MarketUpsert {
	u.Set(market.FieldTotalBorrows, v)
	return u
}

// UpdateTotalBorrows sets the "total_borrows" field to the value that was provided on create.
func (u *MarketUpsert) UpdateTotalBorrows() *MarketUpsert {
	u.SetExcluded(market.FieldTotalBorrows)
	return u
}

// SetTotalSupply sets the "total_supply" field.
func (u *MarketUpsert) SetTotalSupply(v string) *MarketUpsert {
	u.Set(market.FieldTotalSupply, v)
	return u
}

// UpdateTotalSupply sets the "total_supply" field to the value that was provided on create.
func (u *MarketUpsert) UpdateTotalSupply() *MarketUpsert {
	u.SetExcluded(market.FieldTotalSupply)
	return u
}

// SetUnderlyingAddress sets the "underlying_address" field.
func (u *MarketUpsert) SetUnderlyingAddress(v string) *MarketUpsert {
	u.Set(market.FieldUnderlyingAddress, v)
	return u
}

// UpdateUnderlyingAddress sets the "underlying_address" field to the value that was provided on create.
func (u *MarketUpsert) UpdateUnderlyingAddress() *MarketUpsert {
	u.SetExcluded(market.FieldUnderlyingAddress)
	return u
}

// SetUnderlyingName sets the "underlying_name" field.
func (u *MarketUpsert) SetUnderlyingName(v string) *MarketUpsert {
	u.Set(market.FieldUnderlyingName, v)
	return u
}

// UpdateUnderlyingName sets the "underlying_name" field to the value that was provided on create.
func (u *MarketUpsert) UpdateUnderlyingName() *MarketUpsert {
	u.SetExcluded(market.FieldUnderlyingName)
	return u
}

// SetUnderlyingSymbol sets the "underlying_symbol" field.
func (u *MarketUpsert) SetUnderlyingSymbol(v string) *MarketUpsert {
	u.Set(market.FieldUnderlyingSymbol, v)
	return u
}

// UpdateUnderlyingSymbol sets the "underlying_symbol" field to the value that was provided on create.
func (u *MarketUpsert) UpdateUnderlyingSymbol() *MarketUpsert {
	u.SetExcluded(market.FieldUnderlyingSymbol)
	return u
}

// SetUnderlyingPrice sets the "underlying_price" field.
func (u *MarketUpsert) SetUnderlyingPrice(v string) *MarketUpsert {
	u.Set(market.FieldUnderlyingPrice, v)
	return u
}

// UpdateUnderlyingPrice sets the "underlying_price" field to the value that was provided on create.
func (u *MarketUpsert) UpdateUnderlyingPrice() *MarketUpsert {
	u.SetExcluded(market.FieldUnderlyingPrice)
	return u
}

// SetUnderlyingDecimals sets the "underlying_decimals" field.
func (u *MarketUpsert) SetUnderlyingDecimals(v uint32) *MarketUpsert {
	u.Set(market.FieldUnderlyingDecimals, v)
	return u
}

// UpdateUnderlyingDecimals sets the "underlying_decimals" field to the value that was provided on create.
func (u *MarketUpsert) UpdateUnderlyingDecimals() *MarketUpsert {
	u.SetExcluded(market.FieldUnderlyingDecimals)
	return u
}

// AddUnderlyingDecimals adds v to the "underlying_decimals" field.
func (u *MarketUpsert) AddUnderlyingDecimals(v uint32) *MarketUpsert {
	u.Add(market.FieldUnderlyingDecimals, v)
	return u
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (u *MarketUpsert) SetUnderlyingPriceUsd(v string) *MarketUpsert {
	u.Set(market.FieldUnderlyingPriceUsd, v)
	return u
}

// UpdateUnderlyingPriceUsd sets the "underlying_price_usd" field to the value that was provided on create.
func (u *MarketUpsert) UpdateUnderlyingPriceUsd() *MarketUpsert {
	u.SetExcluded(market.FieldUnderlyingPriceUsd)
	return u
}

// SetBlockNumber sets the "block_number" field.
func (u *MarketUpsert) SetBlockNumber(v uint64) *MarketUpsert {
	u.Set(market.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *MarketUpsert) UpdateBlockNumber() *MarketUpsert {
	u.SetExcluded(market.FieldBlockNumber)
	return u
}

// AddBlockNumber adds v to the "block_number" field.
func (u *MarketUpsert) AddBlockNumber(v uint64) *MarketUpsert {
	u.Add(market.FieldBlockNumber, v)
	return u
}

// SetBlockTimestamp sets the "block_timestamp" field.
func (u *MarketUpsert) SetBlockTimestamp(v uint32) *MarketUpsert {
	u.Set(market.FieldBlockTimestamp, v)
	return u
}

// UpdateBlockTimestamp sets the "block_timestamp" field to the value that was provided on create.
func (u *MarketUpsert) UpdateBlockTimestamp() *MarketUpsert {
	u.SetExcluded(market.FieldBlockTimestamp)
	return u
}

// AddBlockTimestamp adds v to the "block_timestamp" field.
func (u *MarketUpsert) AddBlockTimestamp(v uint32) *MarketUpsert {
	u.Add(market.FieldBlockTimestamp, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *MarketUpsertOne) UpdateNewValues() *MarketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(market.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Market.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MarketUpsertOne) Ignore() *MarketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MarketUpsertOne) DoNothing() *MarketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MarketCreate.OnConflict
// documentation for more info.
func (u *MarketUpsertOne) Update(set func(*MarketUpsert)) *MarketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MarketUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *MarketUpsertOne) SetCreateTime(v time.Time) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateCreateTime() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *MarketUpsertOne) SetUpdateTime(v time.Time) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateUpdateTime() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *MarketUpsertOne) SetAddress(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateAddress() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateAddress()
	})
}

// SetSymbol sets the "symbol" field.
func (u *MarketUpsertOne) SetSymbol(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateSymbol() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateSymbol()
	})
}

// SetName sets the "name" field.
func (u *MarketUpsertOne) SetName(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateName() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateName()
	})
}

// SetBorrowIndex sets the "borrow_index" field.
func (u *MarketUpsertOne) SetBorrowIndex(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetBorrowIndex(v)
	})
}

// UpdateBorrowIndex sets the "borrow_index" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateBorrowIndex() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateBorrowIndex()
	})
}

// SetBorrowRate sets the "borrow_rate" field.
func (u *MarketUpsertOne) SetBorrowRate(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetBorrowRate(v)
	})
}

// UpdateBorrowRate sets the "borrow_rate" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateBorrowRate() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateBorrowRate()
	})
}

// SetSupplyRate sets the "supply_rate" field.
func (u *MarketUpsertOne) SetSupplyRate(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetSupplyRate(v)
	})
}

// UpdateSupplyRate sets the "supply_rate" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateSupplyRate() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateSupplyRate()
	})
}

// SetCash sets the "cash" field.
func (u *MarketUpsertOne) SetCash(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetCash(v)
	})
}

// UpdateCash sets the "cash" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateCash() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateCash()
	})
}

// SetCollateralFactor sets the "collateral_factor" field.
func (u *MarketUpsertOne) SetCollateralFactor(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetCollateralFactor(v)
	})
}

// UpdateCollateralFactor sets the "collateral_factor" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateCollateralFactor() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateCollateralFactor()
	})
}

// SetExchangeRate sets the "exchange_rate" field.
func (u *MarketUpsertOne) SetExchangeRate(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetExchangeRate(v)
	})
}

// UpdateExchangeRate sets the "exchange_rate" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateExchangeRate() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateExchangeRate()
	})
}

// SetReserveFactor sets the "reserve_factor" field.
func (u *MarketUpsertOne) SetReserveFactor(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetReserveFactor(v)
	})
}

// UpdateReserveFactor sets the "reserve_factor" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateReserveFactor() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateReserveFactor()
	})
}

// SetReserves sets the "reserves" field.
func (u *MarketUpsertOne) SetReserves(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetReserves(v)
	})
}

// UpdateReserves sets the "reserves" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateReserves() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateReserves()
	})
}

// SetTotalBorrows sets the "total_borrows" field.
func (u *MarketUpsertOne) SetTotalBorrows(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetTotalBorrows(v)
	})
}

// UpdateTotalBorrows sets the "total_borrows" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateTotalBorrows() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateTotalBorrows()
	})
}

// SetTotalSupply sets the "total_supply" field.
func (u *MarketUpsertOne) SetTotalSupply(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetTotalSupply(v)
	})
}

// UpdateTotalSupply sets the "total_supply" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateTotalSupply() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateTotalSupply()
	})
}

// SetUnderlyingAddress sets the "underlying_address" field.
func (u *MarketUpsertOne) SetUnderlyingAddress(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingAddress(v)
	})
}

// UpdateUnderlyingAddress sets the "underlying_address" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateUnderlyingAddress() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingAddress()
	})
}

// SetUnderlyingName sets the "underlying_name" field.
func (u *MarketUpsertOne) SetUnderlyingName(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingName(v)
	})
}

// UpdateUnderlyingName sets the "underlying_name" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateUnderlyingName() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingName()
	})
}

// SetUnderlyingSymbol sets the "underlying_symbol" field.
func (u *MarketUpsertOne) SetUnderlyingSymbol(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingSymbol(v)
	})
}

// UpdateUnderlyingSymbol sets the "underlying_symbol" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateUnderlyingSymbol() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingSymbol()
	})
}

// SetUnderlyingPrice sets the "underlying_price" field.
func (u *MarketUpsertOne) SetUnderlyingPrice(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingPrice(v)
	})
}

// UpdateUnderlyingPrice sets the "underlying_price" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateUnderlyingPrice() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingPrice()
	})
}

// SetUnderlyingDecimals sets the "underlying_decimals" field.
func (u *MarketUpsertOne) SetUnderlyingDecimals(v uint32) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingDecimals(v)
	})
}

// AddUnderlyingDecimals adds v to the "underlying_decimals" field.
func (u *MarketUpsertOne) AddUnderlyingDecimals(v uint32) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.AddUnderlyingDecimals(v)
	})
}

// UpdateUnderlyingDecimals sets the "underlying_decimals" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateUnderlyingDecimals() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingDecimals()
	})
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (u *MarketUpsertOne) SetUnderlyingPriceUsd(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingPriceUsd(v)
	})
}

// UpdateUnderlyingPriceUsd sets the "underlying_price_usd" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateUnderlyingPriceUsd() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingPriceUsd()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *MarketUpsertOne) SetBlockNumber(v uint64) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *MarketUpsertOne) AddBlockNumber(v uint64) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateBlockNumber() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetBlockTimestamp sets the "block_timestamp" field.
func (u *MarketUpsertOne) SetBlockTimestamp(v uint32) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetBlockTimestamp(v)
	})
}

// AddBlockTimestamp adds v to the "block_timestamp" field.
func (u *MarketUpsertOne) AddBlockTimestamp(v uint32) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.AddBlockTimestamp(v)
	})
}

// UpdateBlockTimestamp sets the "block_timestamp" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateBlockTimestamp() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateBlockTimestamp()
	})
}

// Exec executes the query.
func (u *MarketUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MarketCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MarketUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MarketUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MarketUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MarketCreateBulk is the builder for creating many Market entities in bulk.
type MarketCreateBulk struct {
	config
	builders []*MarketCreate
	conflict []sql.ConflictOption
}

// Save creates the Market entities in the database.
func (mcb *MarketCreateBulk) Save(ctx context.Context) ([]*Market, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Market, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MarketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MarketCreateBulk) SaveX(ctx context.Context) []*Market {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MarketCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MarketCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Market.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MarketUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (mcb *MarketCreateBulk) OnConflict(opts ...sql.ConflictOption) *MarketUpsertBulk {
	mcb.conflict = opts
	return &MarketUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mcb *MarketCreateBulk) OnConflictColumns(columns ...string) *MarketUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MarketUpsertBulk{
		create: mcb,
	}
}

// MarketUpsertBulk is the builder for "upsert"-ing
// a bulk of Market nodes.
type MarketUpsertBulk struct {
	create *MarketCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *MarketUpsertBulk) UpdateNewValues() *MarketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(market.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MarketUpsertBulk) Ignore() *MarketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MarketUpsertBulk) DoNothing() *MarketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MarketCreateBulk.OnConflict
// documentation for more info.
func (u *MarketUpsertBulk) Update(set func(*MarketUpsert)) *MarketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MarketUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *MarketUpsertBulk) SetCreateTime(v time.Time) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateCreateTime() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *MarketUpsertBulk) SetUpdateTime(v time.Time) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateUpdateTime() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAddress sets the "address" field.
func (u *MarketUpsertBulk) SetAddress(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateAddress() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateAddress()
	})
}

// SetSymbol sets the "symbol" field.
func (u *MarketUpsertBulk) SetSymbol(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateSymbol() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateSymbol()
	})
}

// SetName sets the "name" field.
func (u *MarketUpsertBulk) SetName(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateName() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateName()
	})
}

// SetBorrowIndex sets the "borrow_index" field.
func (u *MarketUpsertBulk) SetBorrowIndex(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetBorrowIndex(v)
	})
}

// UpdateBorrowIndex sets the "borrow_index" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateBorrowIndex() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateBorrowIndex()
	})
}

// SetBorrowRate sets the "borrow_rate" field.
func (u *MarketUpsertBulk) SetBorrowRate(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetBorrowRate(v)
	})
}

// UpdateBorrowRate sets the "borrow_rate" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateBorrowRate() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateBorrowRate()
	})
}

// SetSupplyRate sets the "supply_rate" field.
func (u *MarketUpsertBulk) SetSupplyRate(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetSupplyRate(v)
	})
}

// UpdateSupplyRate sets the "supply_rate" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateSupplyRate() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateSupplyRate()
	})
}

// SetCash sets the "cash" field.
func (u *MarketUpsertBulk) SetCash(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetCash(v)
	})
}

// UpdateCash sets the "cash" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateCash() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateCash()
	})
}

// SetCollateralFactor sets the "collateral_factor" field.
func (u *MarketUpsertBulk) SetCollateralFactor(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetCollateralFactor(v)
	})
}

// UpdateCollateralFactor sets the "collateral_factor" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateCollateralFactor() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateCollateralFactor()
	})
}

// SetExchangeRate sets the "exchange_rate" field.
func (u *MarketUpsertBulk) SetExchangeRate(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetExchangeRate(v)
	})
}

// UpdateExchangeRate sets the "exchange_rate" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateExchangeRate() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateExchangeRate()
	})
}

// SetReserveFactor sets the "reserve_factor" field.
func (u *MarketUpsertBulk) SetReserveFactor(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetReserveFactor(v)
	})
}

// UpdateReserveFactor sets the "reserve_factor" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateReserveFactor() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateReserveFactor()
	})
}

// SetReserves sets the "reserves" field.
func (u *MarketUpsertBulk) SetReserves(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetReserves(v)
	})
}

// UpdateReserves sets the "reserves" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateReserves() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateReserves()
	})
}

// SetTotalBorrows sets the "total_borrows" field.
func (u *MarketUpsertBulk) SetTotalBorrows(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetTotalBorrows(v)
	})
}

// UpdateTotalBorrows sets the "total_borrows" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateTotalBorrows() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateTotalBorrows()
	})
}

// SetTotalSupply sets the "total_supply" field.
func (u *MarketUpsertBulk) SetTotalSupply(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetTotalSupply(v)
	})
}

// UpdateTotalSupply sets the "total_supply" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateTotalSupply() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateTotalSupply()
	})
}

// SetUnderlyingAddress sets the "underlying_address" field.
func (u *MarketUpsertBulk) SetUnderlyingAddress(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingAddress(v)
	})
}

// UpdateUnderlyingAddress sets the "underlying_address" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateUnderlyingAddress() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingAddress()
	})
}

// SetUnderlyingName sets the "underlying_name" field.
func (u *MarketUpsertBulk) SetUnderlyingName(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingName(v)
	})
}

// UpdateUnderlyingName sets the "underlying_name" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateUnderlyingName() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingName()
	})
}

// SetUnderlyingSymbol sets the "underlying_symbol" field.
func (u *MarketUpsertBulk) SetUnderlyingSymbol(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingSymbol(v)
	})
}

// UpdateUnderlyingSymbol sets the "underlying_symbol" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateUnderlyingSymbol() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingSymbol()
	})
}

// SetUnderlyingPrice sets the "underlying_price" field.
func (u *MarketUpsertBulk) SetUnderlyingPrice(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingPrice(v)
	})
}

// UpdateUnderlyingPrice sets the "underlying_price" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateUnderlyingPrice() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingPrice()
	})
}

// SetUnderlyingDecimals sets the "underlying_decimals" field.
func (u *MarketUpsertBulk) SetUnderlyingDecimals(v uint32) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingDecimals(v)
	})
}

// AddUnderlyingDecimals adds v to the "underlying_decimals" field.
func (u *MarketUpsertBulk) AddUnderlyingDecimals(v uint32) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.AddUnderlyingDecimals(v)
	})
}

// UpdateUnderlyingDecimals sets the "underlying_decimals" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateUnderlyingDecimals() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingDecimals()
	})
}

// SetUnderlyingPriceUsd sets the "underlying_price_usd" field.
func (u *MarketUpsertBulk) SetUnderlyingPriceUsd(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetUnderlyingPriceUsd(v)
	})
}

// UpdateUnderlyingPriceUsd sets the "underlying_price_usd" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateUnderlyingPriceUsd() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateUnderlyingPriceUsd()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *MarketUpsertBulk) SetBlockNumber(v uint64) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *MarketUpsertBulk) AddBlockNumber(v uint64) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateBlockNumber() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetBlockTimestamp sets the "block_timestamp" field.
func (u *MarketUpsertBulk) SetBlockTimestamp(v uint32) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetBlockTimestamp(v)
	})
}

// AddBlockTimestamp adds v to the "block_timestamp" field.
func (u *MarketUpsertBulk) AddBlockTimestamp(v uint32) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.AddBlockTimestamp(v)
	})
}

// UpdateBlockTimestamp sets the "block_timestamp" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateBlockTimestamp() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateBlockTimestamp()
	})
}

// Exec executes the query.
func (u *MarketUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MarketCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MarketCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MarketUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
